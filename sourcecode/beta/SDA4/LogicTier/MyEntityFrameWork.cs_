// Copyright (c) Daniel Giversen. All Rights reserved.
// Copyright (c) Haderslev Kommune. All Rights reserved.
// Licenced under Proprietary License. See License.txt
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using ApiRepository;
using Lib.Common.Disc;
using Lib.Common.Sql;
using DataTier;
using Repository;

namespace LogicTier
{
	/// <remarks/>
	public partial class MyEntityFrameWork // Main
	{
		#region Fields
		private const string currentMethod="Lib.Sd.Logic.MyEntityFrameWork";

		#endregion

		#region Constructors

		/// <remarks/>
		public MyEntityFrameWork() { try { Console.WriteLine("- Prepares the connection to database"); Config.CurrentInstitutionIdentifier="NO"; RefreshAllLists(); } catch (Exception ex) { Console.WriteLine("- An "+ex.GetType().Name+" occurred:"+Environment.NewLine+ex+Environment.NewLine); } }

		#endregion

		#region Properties
		/// <remarks />
		public Config Config=new();

		/// <remarks />
		public EFContext Db=new();

		#endregion

		#region Methods

		#region Check

		/// <summary>Checks wether a DepartmentReference exist in DepartmentReferences</summary><param name="reference" /><returns>Result as bool</returns>
		public bool CheckDepartmentReferenceExist(DepartmentReference reference)
		{
			bool result=false;

			if (reference != null)
			{
				reference.Validate();

				if (!Config.Database.DepartmentReferences.Any()) RefreshDepartmentReferences(true);

				foreach (DepartmentReference departmentReference in Config.Database.DepartmentReferences)
				{
					departmentReference.Validate();

					if (departmentReference.Id >= 1)
					{
						if (departmentReference.Id.Equals(reference.Id))
						{
							result=true;
							break;
						}
					}
					else
					{
						if (departmentReference.DepartmentReferenceIdentifier.Equals(departmentReference.DepartmentReferenceIdentifier))
						{
							result=true;
							break;
						}
					}
				}
			}

			return result;

		}

		/// <summary>Checks wether SeniorDepartmentReferences have Ids</summary><param name="reference" /><returns>DepartmentReference</returns>
		private DepartmentReference CheckSeniorDepartmentReferences(DepartmentReference reference)
		{
			DepartmentReference result=new();

			//Level 1
			if (reference.SeniorDepartmentReference != null)
			{
				//Level 2
				if (reference.SeniorDepartmentReference.SeniorDepartmentReference != null)
				{
					//Level 3
					if (reference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference != null)
					{
						//Level 4
						if (reference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference != null)
						{
							//Level 5
							if (reference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference!=null&&reference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.Id<1)
							{
								reference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.Id=RetrieveDepartmentReference(reference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference).Id;
							}

							if (reference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.Id < 1)
							{
								reference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.Id=RetrieveDepartmentReference(reference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference).Id;
							}

						}

						if (reference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.Id < 1)
						{
							reference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference.Id=RetrieveDepartmentReference(reference.SeniorDepartmentReference.SeniorDepartmentReference.SeniorDepartmentReference).Id;
						}

					}

					if (reference.SeniorDepartmentReference.SeniorDepartmentReference.Id < 1)
					{
						reference.SeniorDepartmentReference.SeniorDepartmentReference.Id=RetrieveDepartmentReference(reference.SeniorDepartmentReference.SeniorDepartmentReference).Id;
					}

				}

				if (reference.SeniorDepartmentReference.Id < 1)
				{
					reference.SeniorDepartmentReference.Id=RetrieveDepartmentReference(reference.SeniorDepartmentReference).Id;
				}

			}

			//Grundniveau

			return reference;

		}

		#endregion

		#region Convert
		/// <returns><paramref name="array"/> as object</returns><param name="list" /><param name="array" />
		public object ConvertObject(string list, string[] array)
		{
			object result=new();

			if (list.Contains("SelectGet")) list=list.Remove(0, 9);
			else if (list.Contains("Select")) list=list.Remove(0, 6);

			return list switch
			{
				"3in1Organizations" => new Api3in1Organization(array),
				"3in1OrganizationStructures" => new Api3in1OrganizationStructure(array),
				"3in1Persons" => new Api3in1Person(array),
				"ContactInformations" => new ContactInformation(array),
				"Departments" => ConvertDepartment(array),
				"DepartmentLevelReferences" => ConvertDepartmentLevelReference(array),
				"DepartmentReferences" => ConvertDepartmentReference(array),
				"DownloadPaths" => new DownloadPath(array),
				"Employments" => ConvertEmployment(array),
				"EmploymentStatuses" => new EmploymentStatus(array),
				"Institutions" => ConvertInstitution(array),
				"MochPersons" => new ApiMochPerson(array),
				"Organizations" => new Organization(array,GetInstitution(Convert.ToInt32(array[4]))),
				"OrganizationStructures" => new OrganizationStructure(array,GetInstitution(Convert.ToInt32(array[2]))),
				"Persons" => ConvertPerson(array),
				"PostalAddresses" => new PostalAddress(array),
				"Professions" => ConvertProfession(array),
				"SalaryAgreements" => new SalaryAgreement(array),
				"SalaryCodeGroups" => new SalaryCodeGroup(array),
				"SuccessfulRuns" => new SuccessfulRun(array),
				"WorkingTimes" => new WorkingTime(array),
				_ => throw new ArgumentInvalidException(nameof(list),list,nameof(list)+Error.UnkParam),
			};
		}

		/// <returns><paramref name="array"/> as Department</returns><param name="array" />
		private Department ConvertDepartment(string[] array)
		{
			PostalAddress? dAddress=null;
			ContactInformation? dInfo=null;

			if (array.Length>=10&&array[9] != null&&int.TryParse(array[9], out int dAddressId)) dAddress=GetPostalAddress(dAddressId);
			if (array.Length>=11&&array[10]!=null&&int.TryParse(array[10], out int dInfoId)) dInfo=GetContactInformation(dInfoId);

			return new Department(array, GetInstitution(Convert.ToInt32(array[8])), dAddress, dInfo);

		}

		/// <returns><paramref name="array"/> as DepartmentLevelReference</returns><param name="array" />
		private DepartmentLevelReference ConvertDepartmentLevelReference(string[] array)
		{
			DepartmentLevelReference? senLev=null;

			if (array.Length >= 5)
			{
				if (array[4] != null && array[4] != "null" && array[4].Length >= 1)
				{
					if (int.TryParse(array[4], out int senLevId))
					{
						senLev=GetDepartmentLevelReference(senLevId);
					}

				}
			}

			return new DepartmentLevelReference(array, GetOrganizationStructure(Convert.ToInt32(array[3])), senLev);

		}

		/// <returns><paramref name="array"/> as DepartmentReference</returns><param name="array" />
		private DepartmentReference ConvertDepartmentReference(string[] array)
		{
			DepartmentReference? senRef=null;

			if (array.Length >= 7)
			{
				if (array[6] != null && array[6] != "null" && array[6].Length >= 1)
				{
					if (int.TryParse(array[3], out int senRefId))
					{
						senRef=GetDepartmentReference(senRefId);
					}

				}
			}


			return new DepartmentReference(array, GetOrganization(Convert.ToInt32(array[5])), senRef);

		}

		/// <returns><paramref name="array"/> as Employment</returns><param name="array" />
		private Employment ConvertEmployment(string[] array)
		{
			Person empy=new();
			Department dept=new();
			Profession prof=new();
			EmploymentStatus? status=null;
			SalaryAgreement? agreement=null;
			SalaryCodeGroup? codeGroup=null;
			WorkingTime? time=null;

			if (int.TryParse(array[5], out int empyId)) empy=GetPerson(empyId);
			if (int.TryParse(array[6], out int deptId)) dept=GetDepartment(deptId);
			if (int.TryParse(array[7], out int profId)) prof=GetProfession(profId);
			if (int.TryParse(array[8], out int statusId)) status=GetEmploymentStatus(statusId);
			if (int.TryParse(array[9], out int agreementId)) agreement=GetSalaryAgreement(agreementId);
			if (int.TryParse(array[10], out int codeGroupId)) codeGroup=GetSalaryCodeGroup(codeGroupId);
			if (int.TryParse(array[11], out int timeId)) time=GetWorkingTime(timeId);

			return new Employment(array, empy, dept, prof, status, agreement, codeGroup, time, GetInstitution(Convert.ToInt32(array[12])));

		}

		/// <returns><paramref name="array"/> as Institution</returns><param name="array" />
		private Institution ConvertInstitution(string[] array) => new Institution(array);

		/// <returns><paramref name="array"/> as Person</returns><param name="array" />
		private Person ConvertPerson(string[] array)
		{
			PostalAddress? pAddress=null;
			ContactInformation? pInfo=null;


			if (array.Length>=7&&array[6]!=null&&int.TryParse(array[6], out int pAddressId)) pAddress=GetPostalAddress(pAddressId);
			if (array.Length>=8&&array[7]!=null&&int.TryParse(array[7], out int pInfoId)) pInfo=GetContactInformation(pInfoId);

			return new Person(array, GetInstitution(Convert.ToInt32(array[5])), pAddress, pInfo);

		}

		/// <returns><paramref name="array"/> as Profession</returns><param name="array" />
		private Profession ConvertProfession(string[] array) { if (array[1].Length>10) array[1]=array[1].Remove(10); if (array[2].Length>10) array[2]=array[2].Remove(10); return new Profession(array, GetInstitution(Convert.ToInt32(array[9]))); }

		#endregion

		#region Clear

		/// <summary>Clears content of Config.BulkExist.ContactInformationList</summary>
		protected void ClearBulkContactInformations() => Config.BulkExist.ContactInformationList.Clear();

		/// <summary>Clears content of Config.BulkExist.DepartmentList</summary>
		private void ClearBulkDepartments() => Config.BulkExist.DepartmentList.Clear();

		/// <summary>Clears content of Config.BulkExist.EmploymentList</summary>
		private void ClearBulkEmployments() => Config.BulkExist.EmploymentList.Clear();

		/// <summary>Clears content of Config.BulkExist.InstitutionList</summary>
		private void ClearBulkInstitutions() => Config.BulkExist.InstitutionList.Clear();

		/// <summary>Clears content of Config.BulkExist.PersonList</summary>
		private void ClearBulkPersons() => Config.BulkExist.PersonList.Clear();

		/// <summary>Clears content of Config.BulkExist.PostalAddressList</summary>
		private void ClearBulkPostalAddresses() => Config.BulkExist.PostalAddressList.Clear();

		#endregion

		#region Current
		/// <returns>Current line number as int</returns><param name="lineNumber" />
		private static int CurrentLineNumber([CallerLineNumber] int lineNumber=0) => lineNumber;

		/// <returns>Current method name as string</returns><param name="memberName" />
		private static string CurrentMethod([CallerMemberName] string memberName="") => currentMethod+"."+memberName+"()";

		#endregion

		#region DataBase

		#region Bulk
		/// <summary>Deletes EmploymentStatuses from database</summary><param name="list" /><returns>Result as bool</returns>
		public bool BulkDeleteEmploymentStatusesFromDatabase(List<EmploymentStatus> list) => ExecutorExt.DeleteBulkList(Config.ConnectionString,list);

		/// <summary>Inserts a bulk list into database</summary><param name="list" /><returns>Result as bool</returns>
		public bool BulkInsertList<T>(List<T> list) where T : class => ExecutorExt.InsertBulkList(Config.ConnectionString,list);

		/// <summary>Updates a bulk list in database</summary><typeparam name="T" /><param name="list" /><returns>Result as bool</returns>
		public bool BulkUpdateList<T>(List<T> list) where T : class => ExecutorExt.UpdateBulkList(Config.ConnectionString,list);

		#endregion

		#region Check

		/// <returns>Result as bool</returns><param name="entity" /><exception cref="ArgumentInvalidException" />
		private bool CheckEmploymentStatusExist(EmploymentStatus entity)
		{
			if(entity.IsEmpty()) throw new ArgumentInvalidException(nameof(entity),nameof(entity)+Error.CantBeEmpty);

			Config.Dict.EmploymentStatusDict.Clear();

			if(!Config.Database.EmploymentStatuses.Any()) RefreshEmploymentStatuses();

			foreach (EmploymentStatus item in Config.Database.EmploymentStatuses) if(!item.IsEmpty()) Config.Dict.EmploymentStatusDict.Add(item.TKey,item);

			return Config.Dict.EmploymentStatusDict.ContainsKey(entity.TKey);

		}

		/// <returns>Result as bool</returns><param name="entity" /><exception cref="ArgumentInvalidException" />
		private bool CheckSalaryAgreementExist(SalaryAgreement entity)
		{
			if(entity.IsEmpty()) throw new ArgumentInvalidException(nameof(entity),nameof(entity)+Error.CantBeEmpty);

			Config.Dict.SalaryAgreementDict.Clear();

			if(!Config.Database.SalaryAgreements.Any()) RefreshSalaryAgreements();

			foreach (SalaryAgreement item in Config.Database.SalaryAgreements) if(!item.IsEmpty()) Config.Dict.SalaryAgreementDict.Add(item.TKey,item);

			return Config.Dict.SalaryAgreementDict.ContainsKey(entity.TKey);

		}

		/// <returns>Result as bool</returns><param name="entity" /><exception cref="ArgumentInvalidException" />
		private bool CheckSalaryCodeGroupExist(SalaryCodeGroup entity)
		{
			if(entity.IsEmpty()) throw new ArgumentInvalidException(nameof(entity),nameof(entity)+Error.CantBeEmpty);

			Config.Dict.SalaryCodeGroupDict.Clear();

			if(!Config.Database.SalaryCodeGroups.Any()) RefreshSalaryCodeGroups();

			foreach (SalaryCodeGroup item in Config.Database.SalaryCodeGroups) if(!item.IsEmpty()) Config.Dict.SalaryCodeGroupDict.Add(item.TKey,item);

			return Config.Dict.SalaryCodeGroupDict.ContainsKey(entity.TKey);

		}

		/// <returns>Result as bool</returns><param name="entity" /><exception cref="ArgumentInvalidException" />
		private bool CheckWorkingTimeExist(WorkingTime entity)
		{
			if(entity.IsEmpty()) throw new ArgumentInvalidException(nameof(entity),nameof(entity)+Error.CantBeEmpty);

			Config.Dict.WorkingTimeDict.Clear();

			if(!Config.Database.WorkingTimes.Any()) RefreshWorkingTimes();

			foreach (WorkingTime item in Config.Database.WorkingTimes) if(!item.IsEmpty()) Config.Dict.WorkingTimeDict.Add(item.TKey,item);

			return Config.Dict.WorkingTimeDict.ContainsKey(entity.TKey);

		}

		#endregion

		#region Create

		/// <summary>Creates <paramref name="entity"/> in database</summary><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		private int CreateContactInformation(ContactInformation entity)
		{
			entity.Validate();

			ContactInformation tempEntity=new(entity);

			try { ProcesSqlQuery(tempEntity.ToSqlInsertQuery()); }
			catch (ExpressionException eex)
			{
				if (eex.GetType().Equals(typeof(SqlException))&&eex.Message.Contains("PRIMARY KEY constraint")&&tempEntity.Id>=1&&UpdateContactInformation(tempEntity)) Config.Database.ContactInformations.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not create the ContactInformation: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine+eex.ToErrorString()+Environment.NewLine);
			}
			catch (Exception ex)
			{
				if (ex.GetType().Equals(typeof(SqlException))&&ex.Message.Contains("PRIMARY KEY constraint")&&tempEntity.Id>=1&&UpdateContactInformation(tempEntity)) Config.Database.ContactInformations.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not create the ContactInformation: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine+ExpressionException.ToErrorString(ex)+Environment.NewLine);
			}
			
			return tempEntity.Id;

		}

		/// <summary>Creates <paramref name="entity"/> in database</summary><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		private int CreateDepartment(Department entity)
		{
			if (entity.Id>=1&&UpdateDepartment(entity)) return entity.Id;

			entity.Validate();

			//Check Institution
			if (entity.Institution.IsEmpty()) { entity.Institution=Config.CurrentInstitution; entity.Validate(); }

			Department tempEntity=new(entity);
			Department createEntity=new(entity) { DepartmentUuidIdentifier=Config.MacAddress };

			if (ProcesSqlQuery(createEntity.ToSqlInsertQuery()))
			{
				tempEntity.Id=RetrieveDepartmentId();

				if (tempEntity.Id>=1) if (UpdateInDatabase(ref tempEntity, false)) Config.Database.Departments.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not update the created Department: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);

			}
			else WriteStringLineToLogFile("- Could not create the Department: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);

			return tempEntity.Id;

		}

		/// <summary>Creates <paramref name="entity"/> in database</summary><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		private int CreateDepartmentLevelReference(DepartmentLevelReference entity)
		{
			int result=0;

			entity.Validate();

			if (entity.Id != 0)
			{
				entity.Id=0;
			}

			//Initialize empty department reference in the database to get Id
			DepartmentLevelReference tempEntity=new(entity);
			DepartmentLevelReference createEntity=new(entity) { DepartmentLevelIdentifier=Config.MacAddress };

			if (ProcesSqlQuery(createEntity.ToSqlInsertQuery()))
			{
				result=tempEntity.Id=RetrieveDepartmentLevelReferenceId();

				//Update department level reference
				if (tempEntity.Id >= 1)
				{
					if (UpdateInDatabase(ref entity, false))
					{
						tempEntity=new(entity);
						bool updated=false;

						//Check Organization structure
						if (tempEntity.OrganizationStructure != null)
						{
							if ((tempEntity.OrganizationStructure.Id < 1))
							{
								tempEntity.OrganizationStructure.Id=RetrieveOrganizationStructureId(tempEntity.OrganizationStructure);

								if (!updated)
								{
									updated=true;
								}

							}
						}
						else
						{
							tempEntity.OrganizationStructure=new();
						}

						//Check SeniorDepartmentLevelReference
						if (tempEntity.SeniorDepartmentLevelReference != null)
						{
							tempEntity.SeniorDepartmentLevelReference.Validate();

							if (!tempEntity.SeniorDepartmentLevelReference.IsEmpty())
							{
								if (tempEntity.SeniorDepartmentLevelReference.Id < 1)
								{
									tempEntity.SeniorDepartmentLevelReference.Id=RetrieveDepartmentLevelReferenceId(tempEntity.SeniorDepartmentLevelReference);
								}

								if (tempEntity.SeniorDepartmentLevelReference.Id >= 1)
								{
									if (!updated)
									{
										updated=true;
									}
								}
								else
								{
									WriteStringLineToLogFile("- Could not retrieve the SeniorDepartmentLevelReference Id: "+tempEntity.SeniorDepartmentLevelReference.DepartmentLevelUniqueIdentifier+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);
								}

							}
							else
							{
								tempEntity.SeniorDepartmentLevelReference=null;
							}
						}

						//Update department level reference in the database
						if (updated)
						{
							if (!UpdateInDatabase(ref tempEntity, false))
							{
								WriteStringLineToLogFile("- Could not update the created  DepartmentLevelReference: "+tempEntity.DepartmentLevelUniqueIdentifier+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);
							}
						}

						Config.Database.DepartmentLevelReferences.Add(tempEntity);
						result=tempEntity.Id;

					}

				}
				else
				{
					WriteStringLineToLogFile("- Could not update the created DepartmentLevelReference: "+tempEntity.DepartmentLevelUniqueIdentifier+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);
				}

			}
			else
			{
				WriteStringLineToLogFile("- Could not create the DepartmentLevelReference: "+tempEntity.DepartmentLevelUniqueIdentifier+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);
			}

			return result;

		}

		/// <summary>Creates <paramref name="entity"/> in database</summary><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		private int CreateDepartmentReference(DepartmentReference entity)
		{
			int result=0;
			bool updated=false;

			entity.Validate();

			if (entity.Id != 0)
			{
				entity.Id=0;
			}

			DepartmentReference tempEntity=new(entity);
			DepartmentReference createEntity=new(entity) { DepartmentIdentifier=Config.MacAddress };

			if (ProcesSqlQuery(createEntity.ToSqlInsertQuery()))
			{
				result=tempEntity.Id=RetrieveDepartmentReferenceId();

				//Update departmentreference
				if (tempEntity.Id >= 1)
				{
					if (UpdateInDatabase(ref tempEntity, false))
					{
						//Check Organization
						if (!tempEntity.Organization.IsEmpty())
						{
							if (tempEntity.Organization.Id < 1)
							{
								tempEntity.Organization.Id=RetrieveOrganizationId(tempEntity.Organization);

								if (tempEntity.Id >= 1)
								{
									if (!updated)
									{
										updated=true;
									}
								}
								else
								{
									WriteStringLineToLogFile("- Could not retrieve the Organisation Id: "+entity.Organization.OrganizationIdentifier+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);
								}

							}
						}
						else
						{
							tempEntity.Organization=new();
						}

						//Check SeniorDepartmentReference
						if (tempEntity.SeniorDepartmentReference != null)
						{
							if (!tempEntity.SeniorDepartmentReference.IsEmpty())
							{
								if (tempEntity.SeniorDepartmentReference.Organization != null)
								{
									if (!tempEntity.SeniorDepartmentReference.Organization.IsEmpty())
									{
										if (tempEntity.SeniorDepartmentReference.Organization.Institution != null)
										{
											if (!tempEntity.SeniorDepartmentReference.Organization.Institution.IsEmpty())
											{
												if (tempEntity.SeniorDepartmentReference.Organization.Institution.Id < 1)
												{
													tempEntity.SeniorDepartmentReference.Organization.Institution.Id=RetrieveInstitutionId(tempEntity.SeniorDepartmentReference.Organization.Institution);

													if (!updated)
													{
														updated=true;
													}

												}
											}
										}

										if (tempEntity.SeniorDepartmentReference.Organization.Id < 1)
										{
											if (tempEntity.Organization != null)
											{
												if (tempEntity.Organization.Id >= 1)
												{
													tempEntity.SeniorDepartmentReference.Organization.Id=tempEntity.Organization.Id;

													if (!updated)
													{
														updated=true;
													}

												}
												else
												{
													tempEntity.SeniorDepartmentReference.Organization.Id=tempEntity.Organization.Id=RetrieveOrganizationId(tempEntity.SeniorDepartmentReference.Organization);

													if (!updated)
													{
														updated=true;
													}

												}

											}
											else
											{
												tempEntity.SeniorDepartmentReference.Organization=tempEntity.Organization=Config.CurrentOrganization;

												if (!updated)
												{
													updated=true;
												}

											}

										}

									}
								}

								if (CheckDepartmentReferenceExist(tempEntity.SeniorDepartmentReference))
								{
									if (tempEntity.SeniorDepartmentReference.Id < 1)
									{
										tempEntity.SeniorDepartmentReference.Id=RetrieveDepartmentReferenceId(tempEntity.SeniorDepartmentReference);

										if (!updated)
										{
											updated=true;
										}
									}

								}
								else
								{
									tempEntity.SeniorDepartmentReference.Id=CreateDepartmentReference(tempEntity.SeniorDepartmentReference);

									if (!updated)
									{
										updated=true;
									}

								}
							}
							else
							{
								tempEntity.SeniorDepartmentReference=new();

								if (!updated)
								{
									updated=true;
								}

							}

						}

						//Update department level reference in the database
						if (updated)
						{
							if (!UpdateInDatabase(ref tempEntity, false))
							{
								WriteStringLineToLogFile("- Could not update the creeated DepartmentReference: "+tempEntity.DepartmentReferenceIdentifier+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);
							}
						}

						Config.Database.DepartmentReferences.Add(tempEntity);
						result=tempEntity.Id;

					}

				}
				else
				{
					WriteStringLineToLogFile("- Could not update the created DepartmentReference: "+tempEntity.DepartmentReferenceIdentifier+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);
				}
			}
			else
			{
				WriteStringLineToLogFile("- Could not create the DepartmentReference: "+tempEntity.DepartmentReferenceIdentifier+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);
			}


			return result;

		}

		/// <summary>Creates <paramref name="entity"/> in database</summary><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		private int CreateDownloadPath(DownloadPath entity)
		{
			if (entity.Id>=1&&UpdateDownloadPath(entity)) return entity.Id;

			DownloadPath tempEntity=new(entity);
			DownloadPath createEntity=new(entity) { Path=Config.MacAddress };

			if (ProcesSqlQuery(createEntity.ToSqlInsertQuery()))
			{
				tempEntity.Id=RetrieveDownloadPathId();

				if (tempEntity.Id>=1) if (UpdateInDatabase(ref tempEntity, false)) Config.Database.DownloadPaths.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not update the created DownloadPath: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);

			}
			else WriteStringLineToLogFile("- Could not create the DownloadPath: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);

			return tempEntity.Id;

		}

		/// <summary>Creates <paramref name="entity"/> in database</summary><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		private int CreateEmployment(Employment entity)
		{
			if (entity.Id>=1&&UpdateEmployment(entity)) return entity.Id;

			int result=0;

			entity.Validate();

			//Check Institution
			if (entity.Institution.IsEmpty()) { entity.Institution=Config.CurrentInstitution; entity.Validate(); }

			Employment tempEntity=new(entity);
			Employment createEntity=new(entity) { EmploymentIdentifier=Config.MacAddress };

			if (ProcesSqlQuery(createEntity.ToSqlInsertQuery()))
			{
				result=tempEntity.Id=RetrieveEmploymentId();

				//Check Employment Department
				if (!tempEntity.EmploymentDepartment.IsEmpty())
				{
					//Check Institution
					if (tempEntity.EmploymentDepartment.Institution == null || tempEntity.EmploymentDepartment.Institution.Id < 1 || tempEntity.EmploymentDepartment.Institution.InstitutionIdentifier.Equals("NO"))
					{
						tempEntity.EmploymentDepartment.Institution=Config.CurrentInstitution;
						tempEntity.EmploymentDepartment.Validate();
					}

					tempEntity.EmploymentDepartment=(Department)UpdateOrCreateDepartment(tempEntity.EmploymentDepartment);
				}
				else
				{
					tempEntity.EmploymentDepartment=new() { Institution=RetrieveInstitution(this.Config.CurrentInstitutionIdentifier) };
					tempEntity.EmploymentDepartment=(Department)UpdateOrCreateDepartment(tempEntity.EmploymentDepartment);
				}

				//Check Profession
				tempEntity.Profession=(Profession)UpdateOrCreateProfession(tempEntity.Profession);

				//Check EmploymentStatus
				if (tempEntity.EmploymentStatus!=null)
				{
					if(tempEntity.EmploymentStatus.Id<1) tempEntity.EmploymentStatus.Id=Config.Database.Employments.Count;

					if (CheckEmploymentStatusExist(tempEntity.EmploymentStatus)) UpdateEmploymentStatus(tempEntity.EmploymentStatus);
					else tempEntity.EmploymentStatus.Id=CreateEmploymentStatus(tempEntity.EmploymentStatus);
				}

				//Check SalaryAgreement
				if (tempEntity.SalaryAgreement != null)
				{
					if(tempEntity.SalaryAgreement.Id<1) tempEntity.SalaryAgreement.Id=Config.Database.Employments.Count;

					if (CheckSalaryAgreementExist(tempEntity.SalaryAgreement)) UpdateSalaryAgreement(tempEntity.SalaryAgreement);
					else tempEntity.SalaryAgreement.Id=CreateSalaryAgreement(tempEntity.SalaryAgreement);
				}

				//Check SalaryCodeGroup
				if (tempEntity.SalaryCodeGroup != null)
				{
					if(tempEntity.SalaryCodeGroup.Id<1) tempEntity.SalaryCodeGroup.Id=Config.Database.Employments.Count;

					if (CheckSalaryCodeGroupExist(tempEntity.SalaryCodeGroup)) UpdateSalaryCodeGroup(tempEntity.SalaryCodeGroup);
					else tempEntity.SalaryCodeGroup.Id=CreateSalaryCodeGroup(tempEntity.SalaryCodeGroup);
				}

				//Check WorkingTime
				if (tempEntity.WorkingTime != null)
				{
					if(tempEntity.WorkingTime.Id<1) tempEntity.WorkingTime.Id=Config.Database.Employments.Count;

					if (CheckWorkingTimeExist(tempEntity.WorkingTime)) UpdateWorkingTime(tempEntity.WorkingTime);
					else tempEntity.WorkingTime.Id=CreateWorkingTime(tempEntity.WorkingTime);
				}

				if (result>=1&&UpdateInDatabase(ref tempEntity, false)) Config.Database.Employments.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not update the created Employment: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);


			}
			else WriteStringLineToLogFile("- Could not create the Employment: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);

			return result;

		}

		/// <summary>Creates <paramref name="entity"/> in database</summary><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		private int CreateEmploymentStatus(EmploymentStatus entity)
		{
			entity.Validate();

			EmploymentStatus tempEntity=new(entity);

			try { ProcesSqlQuery(tempEntity.ToSqlInsertQuery()); }
			catch (ExpressionException eex)
			{
				if (eex.GetType().Equals(typeof(SqlException))&&eex.Message.Contains("PRIMARY KEY constraint")&&tempEntity.Id>=1&&UpdateEmploymentStatus(tempEntity)) Config.Database.EmploymentStatuses.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not create the ContactInformation: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine+eex.ToErrorString()+Environment.NewLine);
			}
			catch (Exception ex)
			{
				if (ex.GetType().Equals(typeof(SqlException))&&ex.Message.Contains("PRIMARY KEY constraint")&&tempEntity.Id>=1&&UpdateEmploymentStatus(tempEntity)) Config.Database.EmploymentStatuses.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not create the ContactInformation: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine+ExpressionException.ToErrorString(ex)+Environment.NewLine);
			}
			
			return tempEntity.Id;

		}

		/// <summary>Creates <paramref name="entity"/> in database</summary><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		private int CreateInstitution(Institution entity)
		{
			if (entity.Id>=1&&UpdateInstitution(entity)) return entity.Id;

			int result=0;

			entity.Validate();

			Institution tempEntity=new(entity);
			Institution createEntity=new(entity) { InstitutionIdentifier=Config.MacAddress };

			if (ProcesSqlQuery(createEntity.ToSqlInsertQuery()))
			{
				result=tempEntity.Id=RetrieveInstitutionId();

				if (result >= 1&&UpdateInDatabase(ref tempEntity, false)) Config.Database.Institutions.Add(tempEntity);
				else { WriteStringLineToLogFile("- Could not update the created Institution: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine); }

			}
			else { WriteStringLineToLogFile("- Could not create the Institution: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine); }

			return result;
		}

		/// <summary>Creates <paramref name="entity"/> in database</summary><typeparam name="T" /><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		public int CreateInDatabase<T>(T entity) where T : class
		{
			string type=typeof(T).Name;

			return type switch
			{
				"ContactInformation" => CreateContactInformation(entity as ContactInformation),
				"Department" => CreateDepartment(entity as Department),
				"DepartmentLevelReference" => CreateDepartmentLevelReference(entity as DepartmentLevelReference),
				"DepartmentReference" => CreateDepartmentReference(entity as DepartmentReference),
				"DownloadPath" => CreateDownloadPath(entity as DownloadPath),
				"Employment" => CreateEmployment(entity as Employment),
				"EmploymentStatus" => CreateEmploymentStatus(entity as EmploymentStatus),
				"Institution" => CreateInstitution(entity as Institution),
				"Organization" => CreateOrganization(entity as Organization),
				"OrganizationStructure" => CreateOrganizationStructure(entity as OrganizationStructure),
				"Person" => CreatePerson(entity as Person),
				"PostalAddress" => CreatePostalAddress(entity as PostalAddress),
				"Profession" => CreateProfession(entity as Profession),
				"SalaryAgreement" => CreateSalaryAgreement(entity as SalaryAgreement),
				"SalaryCodeGroup" => CreateSalaryCodeGroup(entity as SalaryCodeGroup),
				"SuccessfulRun" => CreateSuccessfulRun(entity as SuccessfulRun),
				"WorkingTime" => CreateWorkingTime(entity as WorkingTime),
				_ => throw new InvalidRefException(nameof(type),type,type+Error.InvTypeParam),
			};
		}

		/// <summary>Creates <paramref name="entity"/> in database</summary><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		private int CreateOrganization(Organization entity)
		{
			if (entity.Id>=1&&UpdateOrganization(entity)) return entity.Id;

			entity.Validate();

			if (entity.Institution.IsEmpty()) { entity.Institution=Config.CurrentInstitution; entity.Validate(); }

			Organization tempEntity=new(entity);
			Organization createEntity=new(entity) { OrganizationIdentifier=Config.MacAddress };

			if (ProcesSqlQuery(createEntity.ToSqlInsertQuery()))
			{
				tempEntity.Id=RetrieveOrganizationId();

				if (tempEntity.Id>=1&&UpdateInDatabase(ref tempEntity, false)) Config.Database.Organizations.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not update the created Organization: "+tempEntity.OrganizationIdentifier+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);
			}
			else WriteStringLineToLogFile("- Could not create the Organization: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);


			return tempEntity.Id;
		}

		/// <summary>Creates <paramref name="entity"/> in database</summary><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		private int CreateOrganizationStructure(OrganizationStructure entity)
		{
			if (entity.Id>=1&&UpdateOrganizationStructure(entity)) return entity.Id;

			int result=0;

			entity.Validate();

			if (entity.Institution.IsEmpty()) { entity.Institution=Config.CurrentInstitution; entity.Validate(); }

			OrganizationStructure tempEntity=new(entity);
			OrganizationStructure createEntity=new(entity) { OrganizationStructureIdentifier=Config.MacAddress };

			if (ProcesSqlQuery(createEntity.ToSqlInsertQuery()))
			{
				tempEntity.Id=RetrieveOrganizationStructureId();

				// Check Organization Structure
				if (tempEntity.Id>=1&&UpdateInDatabase(ref tempEntity, false)) Config.Database.OrganizationStructures.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not update the created OrganizationStructure: "+tempEntity.OrganizationStructureIdentifier+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);

			}
			else WriteStringLineToLogFile("- Could not create the OrganizationStructure: "+tempEntity.OrganizationStructureIdentifier+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);

			return result;

		}

		/// <summary>Creates <paramref name="entity"/> in database</summary><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		public int CreatePerson(Person entity)
		{
			if (entity.Id>=1&&UpdatePerson(entity)) return entity.Id;

			entity.Validate();

			if (entity.Institution.IsEmpty()) entity.Institution=Config.CurrentInstitution;

			Person tempEntity=new(entity);
			Person createEntity=new(entity) { PersonCivilRegistrationIdentifier=Config.MacAddress };

			if (ProcesSqlQuery(createEntity.ToSqlInsertQuery()))
			{
				tempEntity.Id=RetrievePersonId();

				if (tempEntity.Id>=1&&UpdateInDatabase(ref tempEntity, false)) Config.Database.Persons.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not update the created Person: "+tempEntity.TKey+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);

			}
			else WriteStringLineToLogFile("- Could not create the Person: "+tempEntity.TKey+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);

			return tempEntity.Id;

		}

		/// <summary>Creates <paramref name="entity"/> in database</summary><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		private int CreatePostalAddress(PostalAddress entity)
		{
			entity.Validate();

			PostalAddress tempEntity=new(entity);

			try { ProcesSqlQuery(tempEntity.ToSqlInsertQuery()); }
			catch (ExpressionException eex)
			{
				if (eex.GetType().Equals(typeof(SqlException))&&eex.Message.Contains("PRIMARY KEY constraint")&&tempEntity.Id>=1&&UpdatePostalAddress(tempEntity)) Config.Database.PostalAddresses.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not create the ContactInformation: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine+eex.ToErrorString()+Environment.NewLine);
			}
			catch (Exception ex)
			{
				if (ex.GetType().Equals(typeof(SqlException))&&ex.Message.Contains("PRIMARY KEY constraint")&&tempEntity.Id>=1&&UpdatePostalAddress(tempEntity)) Config.Database.PostalAddresses.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not create the ContactInformation: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine+ExpressionException.ToErrorString(ex)+Environment.NewLine);
			}
			
			return tempEntity.Id;

		}

		/// <summary>Creates <paramref name="entity"/> in database</summary><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		public int CreateProfession(Profession entity)
		{
			if (entity.Id>=1&&UpdateProfession(entity)) return entity.Id;

			entity.Validate();

			if (entity.Institution.IsEmpty()) { entity.Institution=Config.CurrentInstitution; entity.Validate(); }

			Profession tempEntity=new(entity);
			Profession createEntity=new(entity) { JobPositionIdentifier=Config.MacAddress };

			if (ProcesSqlQuery(createEntity.ToSqlInsertQuery()))
			{
				tempEntity.Id=RetrieveProfessionId();

				if (tempEntity.Id>=1&&UpdateInDatabase(ref tempEntity, false)) Config.Database.Professions.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not update the created Profession: "+tempEntity.ProfessionUniqueIdentifier+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);

			}
			else WriteStringLineToLogFile("- Could not create the Profession: "+tempEntity.ProfessionUniqueIdentifier+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);

			return tempEntity.Id;

		}

		/// <summary>Creates <paramref name="entity"/> in database</summary><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		public int CreateSalaryAgreement(SalaryAgreement entity)
		{
			entity.Validate();

			SalaryAgreement tempEntity=new(entity);

			try { ProcesSqlQuery(tempEntity.ToSqlInsertQuery()); }
			catch (ExpressionException eex)
			{
				if (eex.GetType().Equals(typeof(SqlException))&&eex.Message.Contains("PRIMARY KEY constraint")&&tempEntity.Id>=1&&UpdateSalaryAgreement(tempEntity)) Config.Database.SalaryAgreements.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not create the ContactInformation: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine+eex.ToErrorString()+Environment.NewLine);
			}
			catch (Exception ex)
			{
				if (ex.GetType().Equals(typeof(SqlException))&&ex.Message.Contains("PRIMARY KEY constraint")&&tempEntity.Id>=1&&UpdateSalaryAgreement(tempEntity)) Config.Database.SalaryAgreements.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not create the ContactInformation: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine+ExpressionException.ToErrorString(ex)+Environment.NewLine);
			}
			
			return tempEntity.Id;

		}

		/// <summary>Creates <paramref name="entity"/> in database</summary><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		private int CreateSalaryCodeGroup(SalaryCodeGroup entity)
		{
			entity.Validate();

			SalaryCodeGroup tempEntity=new(entity);

			try { ProcesSqlQuery(tempEntity.ToSqlInsertQuery()); }
			catch (ExpressionException eex)
			{
				if (eex.GetType().Equals(typeof(SqlException))&&eex.Message.Contains("PRIMARY KEY constraint")&&tempEntity.Id>=1&&UpdateSalaryCodeGroup(tempEntity)) Config.Database.SalaryCodeGroups.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not create the ContactInformation: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine+eex.ToErrorString()+Environment.NewLine);
			}
			catch (Exception ex)
			{
				if (ex.GetType().Equals(typeof(SqlException))&&ex.Message.Contains("PRIMARY KEY constraint")&&tempEntity.Id>=1&&UpdateSalaryCodeGroup(tempEntity)) Config.Database.SalaryCodeGroups.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not create the ContactInformation: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine+ExpressionException.ToErrorString(ex)+Environment.NewLine);
			}
			
			return tempEntity.Id;

		}

		/// <summary>Creates <paramref name="entity"/> in database</summary><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		private int CreateSuccessfulRun(SuccessfulRun entity)
		{
			int result=0;

			if (entity != null)
			{
				entity.Validate();

				if (entity.Id != 0)
				{
					entity.Id=0;
				}

				SuccessfulRun tempEntity=new(entity);
				SuccessfulRun createEntity=new(entity) { RunMode=Config.MacAddress };

				if (ProcesSqlQuery(createEntity.ToSqlInsertQuery()))
				{
					result=tempEntity.Id=RetrieveSuccessfulRunId();

					if (result >= 1)
					{
						if (UpdateInDatabase(ref tempEntity, false))
						{
							Config.Database.SuccessfulRuns.Add(tempEntity);
						}
					}
					else
					{
						WriteStringLineToLogFile("- Could not update the created SuccessfulRun: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);
					}

				}
				else
				{
					WriteStringLineToLogFile("- Could not create the SuccessfulRun: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine);
				}

			}

			return result;

		}

		/// <summary>Creates <paramref name="entity"/> in database</summary><param name="entity" /><returns>Id as int</returns><exception cref="ArgumentInvalidException" />
		private int CreateWorkingTime(WorkingTime entity)
		{
			entity.Validate();

			WorkingTime tempEntity=new(entity);

			try { ProcesSqlQuery(tempEntity.ToSqlInsertQuery()); }
			catch (ExpressionException eex)
			{
				if (eex.GetType().Equals(typeof(SqlException))&&eex.Message.Contains("PRIMARY KEY constraint")&&tempEntity.Id>=1&&UpdateWorkingTime(tempEntity)) Config.Database.WorkingTimes.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not create the ContactInformation: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine+eex.ToErrorString()+Environment.NewLine);
			}
			catch (Exception ex)
			{
				if (ex.GetType().Equals(typeof(SqlException))&&ex.Message.Contains("PRIMARY KEY constraint")&&tempEntity.Id>=1&&UpdateWorkingTime(tempEntity)) Config.Database.WorkingTimes.Add(tempEntity);
				else WriteStringLineToLogFile("- Could not create the ContactInformation: "+tempEntity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber()+Environment.NewLine+ExpressionException.ToErrorString(ex)+Environment.NewLine);
			}
			
			return tempEntity.Id;

		}

		#endregion

		/// <summary>Deletes an entry from Database</summary><typeparam name="T" /><param name="obj" /><returns>Result as bool</returns>
		public bool DeleteFromDb<T>(T obj) where T : class
		{
			string type=typeof(T).Name;

			switch (type)
			{
				case "ContactInformation": ContactInformation info=new(obj as ContactInformation); return ProcesSqlQuery((obj as ContactInformation).ToSqlDeleteQuery());
				case "Department": Department dept=new(obj as Department); return ProcesSqlQuery((obj as Department).ToSqlDeleteQuery());
				case "DepartmentLevelReference": return ProcesSqlQuery((obj as DepartmentLevelReference).ToSqlDeleteQuery());
				case "DepartmentReference": return ProcesSqlQuery((obj as DepartmentReference).ToSqlDeleteQuery());
				case "DownloadPath": return ProcesSqlQuery((obj as DownloadPath).ToSqlDeleteQuery());
				case "Employment": return ProcesSqlQuery((obj as Employment).ToSqlDeleteQuery());
				case "EmploymentStatus": return ProcesSqlQuery((obj as EmploymentStatus).ToSqlDeleteQuery());
				case "Institution": return ProcesSqlQuery((obj as Institution).ToSqlDeleteQuery());
				case "Organization": return ProcesSqlQuery((obj as Organization).ToSqlDeleteQuery());
				case "OrganizationStructure": return ProcesSqlQuery((obj as OrganizationStructure).ToSqlDeleteQuery());
				case "Person": return ProcesSqlQuery((obj as Person).ToSqlDeleteQuery());
				case "PostalAddress": return ProcesSqlQuery((obj as PostalAddress).ToSqlDeleteQuery());
				case "Profession": return ProcesSqlQuery((obj as Profession).ToSqlDeleteQuery());
				case "SalaryAgreement": return ProcesSqlQuery((obj as SalaryAgreement).ToSqlDeleteQuery());
				case "SalaryCodeGroup": return ProcesSqlQuery((obj as SalaryCodeGroup).ToSqlDeleteQuery());
				case "SuccessfulRun": return ProcesSqlQuery((obj as SuccessfulRun).ToSqlDeleteQuery());
				case "WorkingTime": return ProcesSqlQuery((obj as WorkingTime).ToSqlDeleteQuery());
				default: throw new InvalidRefException(nameof(type),type,type+Error.InvTypeParam);
			}
		}

		/// <summary>Processes an SQL-query</summary><param name="strSql"></param><returns>Result as bool</returns><exception cref="ArgumentEmptyException" />
		public bool ProcesSqlQuery(string strSql) { if(string.IsNullOrWhiteSpace(strSql)) throw new ArgumentEmptyException(nameof(strSql),nameof(strSql)+Error.CantBeEmpty); return Executor.WriteToDataBase(Config.ConnectionString,strSql); }

		#region Read

		/// <returns>List from Database as List{object}</returns><param name="list" /><param name="id" />
		public List<object> ReadListFromDb(string list, int id=-1)
		{
			if (string.IsNullOrWhiteSpace(list)) return new();

			List<object> result=new();

			try
			{
				List<string> strResults=Executor.ReadListFromDataBase(Config.ConnectionString,list, id);

				int fieldAmount=GetFieldAmount(list);

				foreach (string strResult in strResults)
				{
					string[] resultArray=new string[fieldAmount];
					resultArray=strResult.Split(';');
					object obj=ConvertObject(list, resultArray);
					result.Add(obj);
				}

			}
			catch (ExpressionException eex)
			{
				WriteStringLineToLogFile( eex.ToErrorString());
			}

			return result;

		}

		/// <returns>List from Database as List{T}</returns><typeparam name="T" /><param name="procedure" /><param name="args">@InstitutionIdentifier, @OrganizationStructureIdentifier or @OrganizationIdentifier</param>
		public List<T> ReadListFromDbFromStoredProcedure<T>(string procedure, string[]? args=null)
		{
			if (string.IsNullOrWhiteSpace(procedure)) return new();

			List<T> result=new();

			if (procedure != null && procedure.Length >= 6)
			{
				try
				{
					List<string> strResults=Executor.ReadListFromDataBaseFromStoredProcedure(Config.ConnectionString,procedure,args);

					foreach (string strResult in strResults)
					{
						result.Add((T)ConvertObject(procedure, strResult.Split(';')));
					}
				}
				catch (ExpressionException eex)
				{
					WriteStringLineToLogFile( eex.ToErrorString());
				}
			}

			return result;

		}

		/// <summary>Reads a post from Database</summary><param name="list" /><param name="id" /><returns>Result as object</returns>
		public object ReadPostFromDb(string list, int id)
		{
			if (string.IsNullOrWhiteSpace(list)) return new();

			object result=new();

			if (list != null && list.Length >= 1)
			{
				try
				{
					List<object> objList=ReadListFromDb(list, id);
					result=objList[0];
				}
				catch (ExpressionException eex)
				{
					WriteStringLineToLogFile( eex.ToErrorString());
				}
			}

			return result;
		}

		/// <returns>Post from Database as object</returns><param name="list" />
		public object ReadPostFromDb(string list)
		{
			if (string.IsNullOrWhiteSpace(list)) return new();

			if (list.Length >= 1)
			{
				List<object> objList=ReadListFromDb(list);

				string entityType=GetEntityTypeFromListName(list);

				return entityType switch
				{
					"ContactInformation" => GetContactInformation(objList),
					"Department" => GetDepartment(objList),
					"DepartmentLevelReference" => GetDepartmentLevelReference(objList),
					"DepartmentReference" => GetDepartmentReference(objList),
					"DownloadPath" => GetDownloadPath(objList),
					"Employment" => GetEmployment(objList),
					"EmploymentStatus" => GetEmploymentStatus(objList),
					"Institution" => GetInstitution(objList),
					"Organization" => GetOrganization(objList),
					"OrganizationStructure" => GetOrganizationStructure(objList),
					"Person" => GetPerson(objList),
					"PostalAddress" => GetPostalAddress(objList),
					"Profession" => GetProfession(objList),
					"SalaryAgreement" => GetSalaryAgreement(objList),
					"SalaryCodeGroup" => GetSalaryCodeGroup(objList),
					"SuccessfulRun" => GetSuccessfulRun(objList),
					"WorkingTime" => GetWorkingTime(objList),
					_ => throw new InvalidRefException(nameof(entityType),entityType,nameof(entityType)+Error.UnkParam),
				};
			}
			else return new();

		}

		#endregion

		#region Update

		#region Update or Create Entity

		/// <returns><paramref name="entity"/> updated or createdinto database</returns><param name="entity" /><exception cref="ArgumentEmptyException" />
		private object UpdateOrCreateDepartment(Department entity)
		{
			if (entity.IsEmpty()) throw new ArgumentEmptyException(nameof(entity),nameof(entity)+Error.CantBeEmpty);

			if (entity.Id>=1&&UpdateDepartment(entity)) return entity;
			else { entity.Id=CreateDepartment(entity); return entity; }

		}

		/// <returns><paramref name="entity"/> updated or createdinto database</returns><param name="entity" /><exception cref="ArgumentEmptyException" />
		private object UpdateOrCreateDepartmentLevelReference(DepartmentLevelReference entity)
		{
			if (entity.IsEmpty()) throw new ArgumentEmptyException(nameof(entity),nameof(entity)+Error.CantBeEmpty);

			if (entity.Id>=1&&UpdateDepartmentLevelReference(entity)) return entity;
			else { entity.Id=CreateDepartmentLevelReference(entity); return entity; }

		}

		/// <returns><paramref name="entity"/> updated or createdinto database</returns><param name="entity" /><exception cref="ArgumentEmptyException" />
		private object UpdateOrCreateDepartmentReference(DepartmentReference entity)
		{
			if (entity.IsEmpty()) throw new ArgumentEmptyException(nameof(entity),nameof(entity)+Error.CantBeEmpty);

			if (entity.Id>=1&&UpdateDepartmentReference(entity)) return entity;
			else { entity.Id=CreateDepartmentReference(entity); return entity; }

		}

		/// <returns><paramref name="entity"/> updated or createdinto database</returns><param name="entity" /><exception cref="ArgumentEmptyException" />
		private object UpdateOrCreateEmployment(Employment entity)
		{
			if (entity.IsEmpty()) throw new ArgumentEmptyException(nameof(entity),nameof(entity)+Error.CantBeEmpty);

			if (entity.Id>=1&&UpdateEmployment(entity)) return entity;
			else { entity.Id=CreateEmployment(entity); return entity; }
		}

		/// <returns><paramref name="entity"/> updated or created  into datatabase</returns><typeparam name="T" /><param name="entity" /><param name="refreshList">if 'true' - refreshes the corresponding list after updating entity</param><exception cref="InvalidRefException" />
		public bool UpdateOrCreateInDatabase<T>(ref T entity,bool refreshList=true) where T : class
		{
			string type=typeof(T).Name;

			switch (type)
			{
				case "Department": entity=(T)UpdateOrCreateDepartment(entity as Department); if (refreshList) RefreshDepartments(); return true;
				case "DepartmentLevelReference": entity=(T)UpdateOrCreateDepartmentLevelReference(entity as DepartmentLevelReference); if (refreshList) RefreshDepartmentLevelReferences(); return true;
				case "DepartmentReference": entity=(T)UpdateOrCreateDepartmentReference(entity as DepartmentReference); if (refreshList) RefreshDepartmentReferences(); return true;
				case "Employment": entity=(T)UpdateOrCreateEmployment(entity as Employment); if (refreshList) RefreshEmployments(); return true;
				case "Institution": entity=(T)UpdateOrCreateInstitution(entity as Institution); if (refreshList) RefreshInstitutions(); return true;
				case "Organization": entity=(T)UpdateOrCreateOrganization(entity as Organization); if (refreshList) RefreshOrganizations(); return true;
				case "OrganizationStructure": entity=(T)UpdateOrCreateOrganizationStructure(entity as OrganizationStructure); if (refreshList) RefreshOrganizationStructures(); return true;
				case "Person": entity=(T)UpdateOrCreatePerson(entity as Person); if (refreshList) RefreshPersons(); return true;
				case "Profession": entity=(T)UpdateOrCreateProfession(entity as Profession); if (refreshList) RefreshProfessions(); return true;
				default: throw new InvalidRefException(nameof(type),type,type+Error.InvTypeParam);
			}

		}

		/// <returns><paramref name="entity"/> updated or createdinto database</returns><param name="entity" /><exception cref="ArgumentEmptyException" />
		private object UpdateOrCreateInstitution(Institution entity)
		{
			if (entity.IsEmpty()) throw new ArgumentEmptyException(nameof(entity),nameof(entity)+Error.CantBeEmpty);

			if (entity.Id>=1&&UpdateInstitution(entity)) return entity;
			else { entity.Id=CreateInstitution(entity); return entity; }

		}

		/// <returns><paramref name="entity"/> updated or createdinto database</returns><param name="entity" /><exception cref="ArgumentEmptyException" />
		private object UpdateOrCreateOrganization(Organization entity)
		{
			if (entity.IsEmpty()) throw new ArgumentEmptyException(nameof(entity),nameof(entity)+Error.CantBeEmpty);

			if (entity.Id>=1&&UpdateOrganization(entity)) return entity;
			else { entity.Id=CreateOrganization(entity); return entity; }

		}

		/// <returns><paramref name="entity"/> updated or createdinto database</returns><param name="entity" /><exception cref="ArgumentEmptyException" />
		private object UpdateOrCreateOrganizationStructure(OrganizationStructure entity)
		{
			if (entity.IsEmpty()) throw new ArgumentEmptyException(nameof(entity),nameof(entity)+Error.CantBeEmpty);

			if (entity.Id>=1&&UpdateOrganizationStructure(entity)) return entity;
			else { entity.Id=CreateOrganizationStructure(entity); return entity; }

		}

		/// <returns><paramref name="entity"/> updated or createdinto database</returns><param name="entity" /><exception cref="ArgumentEmptyException" />
		private object UpdateOrCreatePerson(Person entity)
		{
			if (entity.IsEmpty()) throw new ArgumentEmptyException(nameof(entity),nameof(entity)+Error.CantBeEmpty);

			if (entity.Id>=1&&UpdatePerson(entity)) return entity;
			else { entity.Id=CreatePerson(entity); return entity; }

		}

		/// <returns><paramref name="entity"/> updated or createdinto database</returns><param name="entity" /><exception cref="ArgumentEmptyException" />
		private object UpdateOrCreateProfession(Profession entity)
		{

			if (entity.Id>=1&&UpdateProfession(entity)) return entity;
			else { entity.Id=CreateProfession(entity); return entity; }

		}

		#endregion

		#region Update Entity
		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		private bool UpdateContactInformation(ContactInformation entity) => ProcesSqlQuery(entity.ToSqlUpdateQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		private bool UpdateDepartment(Department entity) => ProcesSqlQuery(entity.ToSqlUpdateQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		private bool UpdateDepartmentLevelReference(DepartmentLevelReference entity) => ProcesSqlQuery(entity.ToSqlUpdateQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		private bool UpdateDepartmentReference(DepartmentReference entity) => ProcesSqlQuery(entity.ToSqlUpdateQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		private bool UpdateDownloadPath(DownloadPath entity) => ProcesSqlQuery(entity.ToSqlUpdateQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		public bool UpdateDownloadPathDownloaded(DownloadPath entity) => ProcesSqlQuery(entity.ToSqlUpdateDownloadedQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		public bool UpdateDownloadPathUpdated(DownloadPath entity) => ProcesSqlQuery(entity.ToSqlUpdateUpdatedQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		private bool UpdateEmployment(Employment entity) => ProcesSqlQuery(entity.ToSqlUpdateQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		private bool UpdateEmploymentStatus(EmploymentStatus entity) => ProcesSqlQuery(entity.ToSqlUpdateQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><typeparam name="T" /><param name="entity" /><param name="refreshList" /><returns>Result as bool</returns>
		public bool UpdateInDatabase<T>(ref T entity, bool refreshList=true) where T : class
		{
			bool result=false; // assume false until proved

			string type=typeof(T).Name;

			switch (type)
			{
				case "ContactInformation": result=UpdateContactInformation(entity as ContactInformation); if (refreshList) RefreshContactInformations(); return result;
				case "Department": result=UpdateDepartment(entity as Department); if (refreshList) RefreshDepartments(); return result;
				case "DepartmentLevelReference": result=UpdateDepartmentLevelReference(entity as DepartmentLevelReference); if (refreshList) RefreshDepartmentLevelReferences(); return result;
				case "DepartmentReference": result=UpdateDepartmentReference(entity as DepartmentReference); if (refreshList) RefreshDepartmentReferences(); return result;
				case "Employment": result=UpdateEmployment(entity as Employment); if (refreshList) RefreshEmployments(); return result;
				case "EmploymentStatus": result=UpdateEmploymentStatus(entity as EmploymentStatus); if (refreshList) RefreshEmploymentStatuses(); return result;
				case "Institution": result=UpdateInstitution(entity as Institution); if (refreshList) RefreshInstitutions(); return result;
				case "Organization": result=UpdateOrganization(entity as Organization); if (refreshList) RefreshOrganizations(); return result;
				case "OrganizationStructure": result=UpdateOrganizationStructure(entity as OrganizationStructure); if (refreshList) RefreshOrganizationStructures(); return result;
				case "Person": result=UpdatePerson(entity as Person); if (refreshList) RefreshPersons(); return result;
				case "PostalAddress": result=UpdatePostalAddress(entity as PostalAddress); if (refreshList) RefreshPostalAddresses(); return result;
				case "Profession": result=UpdateProfession(entity as Profession); if (refreshList) RefreshProfessions(); return result;
				case "SalaryAgreement": result=UpdateSalaryAgreement(entity as SalaryAgreement); if (refreshList) RefreshSalaryAgreements(); return result;
				case "SalaryCodeGroup": result=UpdateSalaryCodeGroup(entity as SalaryCodeGroup); if (refreshList) RefreshSalaryCodeGroups(); return result;
				case "SuccessfulRun": result=UpdateSuccessfulRun(entity as SuccessfulRun); if (refreshList) RefreshSuccessfulRuns(); return result;
				case "WorkingTime": result=UpdateWorkingTime(entity as WorkingTime); if (refreshList) RefreshWorkingTimes(); return result;
				default: throw new InvalidRefException(nameof(type),type,type+Error.InvTypeParam);
			}

		}

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		private bool UpdateInstitution(Institution entity) => ProcesSqlQuery(entity.ToSqlUpdateQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		private bool UpdateOrganization(Organization entity) => ProcesSqlQuery(entity.ToSqlUpdateQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		private bool UpdateOrganizationStructure(OrganizationStructure entity) => ProcesSqlQuery(entity.ToSqlUpdateQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		private bool UpdatePerson(Person entity) => ProcesSqlQuery(entity.ToSqlUpdateQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		private bool UpdatePostalAddress(PostalAddress entity) => ProcesSqlQuery(entity.ToSqlUpdateQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		private bool UpdateProfession(Profession entity) => ProcesSqlQuery(entity.ToSqlUpdateQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		private bool UpdateSalaryAgreement(SalaryAgreement entity) => ProcesSqlQuery(entity.ToSqlUpdateQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		private bool UpdateSalaryCodeGroup(SalaryCodeGroup entity) => ProcesSqlQuery(entity.ToSqlUpdateQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		private bool UpdateSuccessfulRun(SuccessfulRun entity) => ProcesSqlQuery(entity.ToSqlUpdateQuery());

		/// <summary>Updates existing <paramref name="entity"/> in datatabase</summary><param name="entity" /><returns>Result as bool</returns>
		private bool UpdateWorkingTime(WorkingTime entity) => ProcesSqlQuery(entity.ToSqlUpdateQuery());

		#endregion

		#endregion

		#endregion

		#region Fill Dictionary

		/// <summary>Fills Config.Dict.DownloadPathDict if null or empty</summary>
		public void FillDownloadPathsDict()
		{
			Config.Dict.DownloadPathDict.Clear();

			RefreshDownloadPaths();

			foreach (DownloadPath item in Config.Database.DownloadPaths) { if (item.Id>=1&&!Config.Dict.DownloadPathDict.ContainsKey(item.TKey)) Config.Dict.DownloadPathDict.Add(item.TKey, item); }

		}

		/// <summary>Fills Config.Dict.PersonDict if null or empty</summary>
		public void FillPersonsDict()
		{
			Dictionary<string, Person> tempList=new();

			Config.Dict.PersonDict.Clear();

			if (Config.Database.Persons==null) { Config.Database.Persons=new(); RefreshPersons(); }
			else if (Config.Database.Persons.Count.Equals(0)) RefreshPersons();

			foreach (Person item in Config.Database.Persons) { item.Validate(); if (!item.TKey.Equals("0101001234")&&!Config.Dict.PersonDict.ContainsKey(item.TKey)) Config.Dict.PersonDict.Add(item.TKey, item); }

		}

		/// <summary>Fills Config.Dict.TempSuccessfulRunDict if null or empty</summary>
		public void FillSuccessfulRunDict()
		{
			Config.Dict.TempSuccessfulRunDict.Clear();

			if(Config.Database.SuccessfulRuns.Count<1) RefreshSuccessfulRuns();

			foreach (SuccessfulRun item in Config.Database.SuccessfulRuns) { item.Validate(); if (item.TKey>=1&&Config.Dict.TempSuccessfulRunDict.ContainsKey(item.TKey)) Config.Dict.TempSuccessfulRunDict.Add(item.TKey, item); }

		}

		/// <summary>Fills Config.Dict.TempContactInformationDict if null or empty</summary><param name="update" />
		public void FillTempContactInformationDict(bool update=false)
		{
			Dictionary<int, ContactInformation> tempDict=new();

			if (!update&&Config.Dict.TempContactInformationDict.Count>=1) { foreach (KeyValuePair<int, ContactInformation> item in Config.Dict.TempContactInformationDict) if(item.Key>=1&&!tempDict.ContainsKey(item.Key)) { item.Value.Validate(); tempDict.Add(item.Key, item.Value); } Config.Dict.TempContactInformationDict.Clear(); }
			else Config.Dict.TempContactInformationDict.Clear();

			if (update||Config.Database.ContactInformations.Count<1) RefreshContactInformations();

			foreach (ContactInformation item in Config.Database.ContactInformations) { item.Validate(); if (item.TKey>=1&&!Config.Dict.TempContactInformationDict.ContainsKey(item.TKey)) Config.Dict.TempContactInformationDict.Add(item.TKey, item); }

			if (!update) foreach (KeyValuePair<int, ContactInformation> item in tempDict) { item.Value.Validate(); if (!Config.Dict.TempContactInformationDict.ContainsKey(item.Key)) Config.Dict.TempContactInformationDict.Add(item.Key, item.Value); }

		}

		/// <summary>Fills Config.Dict.TempDepartmentDict if null or empty</summary><param name="update" />
		public void FillTempDepartmentDict(bool update=false)
		{
			Dictionary<string, Department> tempDict=new();

			if (!update&&Config.Dict.TempDepartmentDict.Count>=1) { foreach (KeyValuePair<string, Department> item in Config.Dict.TempDepartmentDict) if (!item.Key.Equals("00000000-0000-0000-0000-000000000000")&&!tempDict.ContainsKey(item.Key)) { item.Value.Validate(); tempDict.Add(item.Key, item.Value); } Config.Dict.TempDepartmentDict.Clear(); }
			else Config.Dict.TempDepartmentDict.Clear();

			if (update||Config.Database.Departments.Count<1) RefreshDepartments(true);

			foreach (Department item in Config.Database.Departments) { item.Validate(); if (!item.TKey.Equals("00000000-0000-0000-0000-000000000000")&&!Config.Dict.TempDepartmentDict.ContainsKey(item.TKey)) Config.Dict.TempDepartmentDict.Add(item.TKey, item); }

			if (!update) foreach (KeyValuePair<string, Department> item in tempDict) { item.Value.Validate(); if (!Config.Dict.TempDepartmentDict.ContainsKey(item.Key)) Config.Dict.TempDepartmentDict.Add(item.Key, item.Value); }

		}

		/// <summary>Fills Config.Dict.TempDepartmentLevelReferenceDict if null or empty</summary><param name="update" />
		public void FillTempDepartmentLevelReferenceDict(bool update=false)
		{
			Dictionary<string, DepartmentLevelReference> tempDict=new();

			if (!update) { if(Config.Dict.TempDepartmentLevelReferenceDict.Count>=1) foreach (KeyValuePair<string, DepartmentLevelReference> item in Config.Dict.TempDepartmentLevelReferenceDict) { item.Value.Validate(); if (!item.Key.Contains(this.Config.CurrentInstitutionIdentifier)&&!tempDict.ContainsKey(item.Key)) tempDict.Add(item.Key, item.Value); } Config.Dict.TempDepartmentLevelReferenceDict.Clear(); }
			else Config.Dict.TempDepartmentLevelReferenceDict.Clear();

			if (update||Config.Database.DepartmentLevelReferences.Count<1) RefreshDepartmentLevelReferences(true);

			foreach (DepartmentLevelReference item in Config.Database.DepartmentLevelReferences) { item.Validate(); if (item.TKey.Contains(this.Config.CurrentInstitutionIdentifier)&&!Config.Dict.TempDepartmentLevelReferenceDict.ContainsKey(item.TKey)) Config.Dict.TempDepartmentLevelReferenceDict.Add(item.TKey, item); }

			if (!update) foreach (KeyValuePair<string, DepartmentLevelReference> item in tempDict) { item.Value.Validate(); if (!Config.Dict.TempDepartmentLevelReferenceDict.ContainsKey(item.Key)) Config.Dict.TempDepartmentLevelReferenceDict.Add(item.Key, item.Value); }

		}

		/// <summary>Fills Config.Dict.TempDepartmentReferenceDict if null or empty</summary><param name="update" />
		public void FillTempDepartmentReferenceDict(bool update=false)
		{
			Dictionary<string, DepartmentReference> tempDict=new();

			if (!update) { if (Config.Dict.TempDepartmentReferenceDict.Count>=1) { foreach (KeyValuePair<string, DepartmentReference> item in Config.Dict.TempDepartmentReferenceDict) { item.Value.Validate(); if (item.Key.Contains(this.Config.CurrentInstitutionIdentifier)&&!tempDict.ContainsKey(item.Key)) tempDict.Add(item.Key, item.Value); } } Config.Dict.TempDepartmentReferenceDict.Clear(); }
			else Config.Dict.TempDepartmentReferenceDict.Clear();

			if (update||Config.Database.DepartmentReferences.Count<1) RefreshDepartmentReferences(true);

			foreach (DepartmentReference item in Config.Database.DepartmentReferences) { item.Validate(); if (item.TKey.Contains(this.Config.CurrentInstitutionIdentifier)&&!Config.Dict.TempDepartmentReferenceDict.ContainsKey(item.TKey)) Config.Dict.TempDepartmentReferenceDict.Add(item.TKey, item); }

			if (!update) foreach (KeyValuePair<string, DepartmentReference> item in tempDict) { item.Value.Validate(); if (!Config.Dict.TempDepartmentReferenceDict.ContainsKey(item.Key)) Config.Dict.TempDepartmentReferenceDict.Add(item.Key, item.Value); }

		}

		/// <summary>Fills Config.Dict.TempDownloadPathDict if null or empty</summary><param name="update" />
		public void FillTempDownloadPathnDict(bool update=false)
		{
			Dictionary<string, DownloadPath> tempDict=new();

			if (!update&&Config.Dict.TempDownloadPathDict.Count>=1) { foreach (KeyValuePair<string, DownloadPath> item in Config.Dict.TempDownloadPathDict) if(!string.IsNullOrWhiteSpace(item.Key)&&!tempDict.ContainsKey(item.Key)) tempDict.Add(item.Key, item.Value); Config.Dict.TempSuccessfulRunDict.Clear(); }
			else Config.Dict.TempSalaryCodeGroupDict.Clear();

			if (update||Config.Database.SalaryCodeGroups.Count<1) RefreshSalaryCodeGroups();

			foreach (DownloadPath item in Config.Database.DownloadPaths) { if (!string.IsNullOrWhiteSpace(item.TKey)&&!Config.Dict.TempDownloadPathDict.ContainsKey(item.TKey)) Config.Dict.TempDownloadPathDict.Add(item.TKey, item); }

			if (!update) foreach (KeyValuePair<string, DownloadPath> item in tempDict) { if (!Config.Dict.TempDownloadPathDict.ContainsKey(item.Key)) Config.Dict.TempDownloadPathDict.Add(item.Key, item.Value); }

		}

		/// <summary>Fills Config.Dict.TempEmploymentDict if null or empty</summary><param name="update" />
		public void FillTempEmploymentDict(bool update=false)
		{
			Dictionary<string, Employment> tempDict=new();

			if (!update&&Config.Dict.TempEmploymentDict.Count>=1) { foreach (KeyValuePair<string, Employment> item in Config.Dict.TempEmploymentDict) { item.Value.Validate(); if (item.Key.Contains(this.Config.CurrentInstitutionIdentifier)&&!tempDict.ContainsKey(item.Key)) tempDict.Add(item.Key, item.Value); } Config.Dict.TempEmploymentDict.Clear(); }
			else Config.Dict.TempEmploymentDict.Clear();

			if (update||Config.Database.Employments.Count<1) RefreshEmployments(true);

			foreach (Employment item in Config.Database.Employments) { item.Validate(); if (item.TKey.Contains(this.Config.CurrentInstitutionIdentifier)&&!Config.Dict.TempEmploymentDict.ContainsKey(item.TKey)) Config.Dict.TempEmploymentDict.Add(item.TKey, item); }

			if (!update) foreach (KeyValuePair<string, Employment> item in tempDict) { item.Value.Validate(); if (!Config.Dict.TempEmploymentDict.ContainsKey(item.Key)) Config.Dict.TempEmploymentDict.Add(item.Key, item.Value); }

		}

		/// <summary>Fills Config.Dict.TempEmploymentStatusDict if null or empty</summary><param name="update" />
		public void FillTempEmploymentStatusDict(bool update=false)
		{
			Dictionary<int, EmploymentStatus> tempDict=new();

			if (!update&&Config.Dict.TempEmploymentStatusDict.Count>=1) { foreach (KeyValuePair<int, EmploymentStatus> item in Config.Dict.TempEmploymentStatusDict) if(item.Key>=1&&!tempDict.ContainsKey(item.Key)) { item.Value.Validate();  tempDict.Add(item.Key, item.Value); } Config.Dict.TempEmploymentDict.Clear(); }
			else Config.Dict.TempEmploymentDict.Clear();

			if (update||Config.Database.EmploymentStatuses.Count<1) RefreshEmploymentStatuses();

			foreach (EmploymentStatus item in Config.Database.EmploymentStatuses) { item.Validate(); if (item.TKey>=1&!Config.Dict.TempEmploymentStatusDict.ContainsKey(item.TKey)) Config.Dict.TempEmploymentStatusDict.Add(item.TKey, item); }

			if (!update) foreach (KeyValuePair<int, EmploymentStatus> item in tempDict) { item.Value.Validate(); if (!Config.Dict.TempEmploymentStatusDict.ContainsKey(item.Key)) Config.Dict.TempEmploymentStatusDict.Add(item.Key, item.Value); }

		}

		/// <summary>Fills Config.Dict.TempInstitutionDict if null or empty</summary><param name="update" />
		public void FillTempInstitutionDict(bool update=false)
		{
			Dictionary<string, Institution> tempDict=new();

			if (!update&&Config.Dict.TempInstitutionDict.Count>=1) { foreach (KeyValuePair<string, Institution> item in Config.Dict.TempInstitutionDict) if(!tempDict.ContainsKey(item.Key)) { item.Value.Validate(); tempDict.Add(item.Key, item.Value); } Config.Dict.TempInstitutionDict.Clear(); }
			else Config.Dict.TempEmploymentDict.Clear();

			if (update||Config.Database.EmploymentStatuses.Count<1) RefreshInstitutions(true);

			foreach (Institution item in Config.Database.Institutions) { item.Validate(); if (!item.TKey.Equals("00000000-0000-0000-0000-000000000000")&&!Config.Dict.TempInstitutionDict.ContainsKey(item.TKey)) Config.Dict.TempInstitutionDict.Add(item.TKey, item); }

			if (!update) foreach (KeyValuePair<string, Institution> item in tempDict) { item.Value.Validate(); if (!Config.Dict.TempInstitutionDict.ContainsKey(item.Key)) Config.Dict.TempInstitutionDict.Add(item.Key, item.Value); }

		}

		/// <summary>Fills Config.Dict.TempOrganizationDict if null or empty</summary><param name="update" />
		public void FillTempOrganizationDict(bool update=false)
		{
			Dictionary<string, Organization> tempDict=new();

			if (!update) { if (Config.Dict.TempOrganizationDict.Count>=1) { foreach (KeyValuePair<string, Organization> item in Config.Dict.TempOrganizationDict) { item.Value.Validate(); if (item.Key.Contains(this.Config.CurrentInstitutionIdentifier)&&!tempDict.ContainsKey(item.Key)) tempDict.Add(item.Key, item.Value);} } Config.Dict.TempOrganizationDict.Clear(); }
			else Config.Dict.TempOrganizationDict.Clear();

			if (update||Config.Database.Organizations.Count<1) RefreshOrganizations(true);

			foreach (Organization item in Config.Database.Organizations) { item.Validate(); if (item.TKey.Contains(this.Config.CurrentInstitutionIdentifier)&&!Config.Dict.TempOrganizationDict.ContainsKey(item.TKey)) Config.Dict.TempOrganizationDict.Add(item.TKey, item); }

			if (!update) foreach (KeyValuePair<string, Organization> item in tempDict) { item.Value.Validate(); if (!Config.Dict.TempOrganizationDict.ContainsKey(item.Key)) Config.Dict.TempOrganizationDict.Add(item.Key, item.Value); }

		}

		/// <summary>Fills Config.Dict.TempOrganizationStructureDict if null or empty</summary><param name="update" />
		public void FillTempOrganizationStructureDict(bool update=false)
		{
			Dictionary<string, OrganizationStructure> tempDict=new();

			if (!update) { if (Config.Dict.TempOrganizationStructureDict.Count>=1) { foreach (KeyValuePair<string, OrganizationStructure> item in Config.Dict.TempOrganizationStructureDict) { item.Value.Validate(); if (item.Key.Contains(this.Config.CurrentInstitutionIdentifier)) tempDict.Add(item.Key, item.Value); } } Config.Dict.TempOrganizationStructureDict.Clear(); }
			else Config.Dict.TempOrganizationStructureDict.Clear();

			if (update||Config.Database.Organizations.Count<1) RefreshOrganizationStructures(true);

			foreach (OrganizationStructure item in Config.Database.OrganizationStructures) { item.Validate(); if (item.TKey.Contains(this.Config.CurrentInstitutionIdentifier)&&!Config.Dict.TempOrganizationStructureDict.ContainsKey(item.TKey)) Config.Dict.TempOrganizationStructureDict.Add(item.TKey, item); }

			if (!update) foreach (KeyValuePair<string, OrganizationStructure> item in tempDict) { item.Value.Validate(); if (!Config.Dict.TempOrganizationStructureDict.ContainsKey(item.Key)) Config.Dict.TempOrganizationStructureDict.Add(item.Key, item.Value); }

		}

		/// <summary>Fills Config.Dict.TempPersonDict if null or empty</summary><param name="update" />
		public void FillTempPersonDict(bool update=false)
		{
			Dictionary<string, Person> tempDict=new();

			if (!update) { if (Config.Dict.TempPersonDict.Count>=1) { foreach (KeyValuePair<string, Person> item in Config.Dict.TempPersonDict) { item.Value.Validate(); if (item.Key.Contains(this.Config.CurrentInstitutionIdentifier)) tempDict.Add(item.Key, item.Value); } } Config.Dict.TempPersonDict.Clear(); }
			else Config.Dict.TempPersonDict.Clear();

			if (update||Config.Database.OrganizationStructures.Count<1) RefreshPersons(true);

			foreach (Person item in Config.Database.Persons) { item.Validate(); if (item.TKey.Contains(this.Config.CurrentInstitutionIdentifier)&&!Config.Dict.TempPersonDict.ContainsKey(item.TKey)) Config.Dict.TempPersonDict.Add(item.TKey, item); }

			if (!update) foreach (KeyValuePair<string, Person> item in tempDict) { item.Value.Validate(); if (item.Key.Contains(this.Config.CurrentInstitutionIdentifier)&&!Config.Dict.TempPersonDict.ContainsKey(item.Key)) Config.Dict.TempPersonDict.Add(item.Key, item.Value); }

		}

		/// <summary>Fills Config.Dict.TempPostalAddressDict if null or empty</summary><param name="update" />
		public void FillTempPostalAddressDict(bool update=false)
		{
			Dictionary<int, PostalAddress> tempDict=new();

			if (!update&&Config.Dict.TempPostalAddressDict.Count>=1) { foreach (KeyValuePair<int, PostalAddress> item in Config.Dict.TempPostalAddressDict) if(item.Key>=1&&!tempDict.ContainsKey(item.Key)) { item.Value.Validate(); tempDict.Add(item.Key, item.Value); } Config.Dict.TempPostalAddressDict.Clear(); }
			else Config.Dict.TempPostalAddressDict.Clear();

			if (update||Config.Database.PostalAddresses.Count<1) RefreshPostalAddresses();

			foreach (PostalAddress item in Config.Database.PostalAddresses) { item.Validate(); if (item.TKey>=1&&!Config.Dict.TempPostalAddressDict.ContainsKey(item.TKey)) Config.Dict.TempPostalAddressDict.Add(item.TKey, item); }

			if (!update) foreach (KeyValuePair<int, PostalAddress> item in tempDict) { item.Value.Validate(); if (!Config.Dict.TempPostalAddressDict.ContainsKey(item.Key)) Config.Dict.TempPostalAddressDict.Add(item.Key, item.Value); }

		}

		/// <summary>Fills Config.Dict.TempProfessionDict if null or empty</summary><param name="update" />
		public void FillTempProfessionDict(bool update=false)
		{
			Dictionary<string, Profession> tempDict=new();

			if (!update) { if (Config.Dict.TempProfessionDict.Count>=1) { foreach (KeyValuePair<string, Profession> item in Config.Dict.TempProfessionDict) { item.Value.Validate(); if (item.Key.Contains(this.Config.CurrentInstitutionIdentifier)) tempDict.Add(item.Key, item.Value); } } Config.Dict.TempProfessionDict.Clear(); }
			else	Config.Dict.TempProfessionDict.Clear();

			if (update) RefreshProfessions(true);

			foreach (Profession item in Config.Database.Professions) { item.Validate(); if (item.TKey.Contains(this.Config.CurrentInstitutionIdentifier)&&!Config.Dict.TempProfessionDict.ContainsKey(item.TKey)) Config.Dict.TempProfessionDict.Add(item.TKey, item); }

			if (!update) foreach (KeyValuePair<string, Profession> item in tempDict) { item.Value.Validate(); if (item.Key.Contains(this.Config.CurrentInstitutionIdentifier)&&!Config.Dict.TempProfessionDict.ContainsKey(item.Key)) Config.Dict.TempProfessionDict.Add(item.Key, item.Value); }

		}

		/// <summary>Fills Config.Dict.TempSalaryAgreementDict if null or empty</summary><param name="update" />
		public void FillTempSalaryAgreementDict(bool update=false)
		{
			Dictionary<int, SalaryAgreement> tempDict=new();

			if (!update&&Config.Dict.TempSalaryAgreementDict.Count>=1) { foreach (KeyValuePair<int, SalaryAgreement> item in Config.Dict.TempSalaryAgreementDict) if(item.Key>=1&&!tempDict.ContainsKey(item.Key)) { item.Value.Validate(); tempDict.Add(item.Key, item.Value); } Config.Dict.TempSalaryAgreementDict.Clear(); }
			else Config.Dict.TempSalaryAgreementDict.Clear();

			if (update||Config.Database.PostalAddresses.Count<1) RefreshSalaryAgreements();

			foreach (SalaryAgreement item in Config.Database.SalaryAgreements) { item.Validate(); if (item.TKey>=1&&!Config.Dict.TempSalaryAgreementDict.ContainsKey(item.TKey)) Config.Dict.TempSalaryAgreementDict.Add(item.Id, item); }

			if (!update) foreach (KeyValuePair<int, SalaryAgreement> item in tempDict) { item.Value.Validate(); if (!Config.Dict.TempSalaryAgreementDict.ContainsKey(item.Key)) Config.Dict.TempSalaryAgreementDict.Add(item.Key, item.Value); }

		}

		/// <summary>Fills Config.Dict.TempSalaryCodeGroupDict if null or empty</summary><param name="update" />
		public void FillTempSalaryCodeGroupDict(bool update=false)
		{
			Dictionary<int, SalaryCodeGroup> tempDict=new();

			if (!update&&Config.Dict.TempSalaryCodeGroupDict.Count>=1) { foreach (KeyValuePair<int, SalaryCodeGroup> item in Config.Dict.TempSalaryCodeGroupDict) if(item.Key>=1&&!tempDict.ContainsKey(item.Key)) { item.Value.Validate(); tempDict.Add(item.Key, item.Value); } Config.Dict.TempSalaryCodeGroupDict.Clear(); }
			else Config.Dict.TempSalaryCodeGroupDict.Clear();

			if (update||Config.Database.SalaryCodeGroups.Count<1) RefreshSalaryCodeGroups();

			foreach (SalaryCodeGroup item in Config.Database.SalaryCodeGroups) { item.Validate(); if (item.TKey>=1&&!Config.Dict.TempSalaryCodeGroupDict.ContainsKey(item.TKey)) Config.Dict.TempSalaryCodeGroupDict.Add(item.TKey, item); }

			if (!update) foreach (KeyValuePair<int, SalaryCodeGroup> item in tempDict) { item.Value.Validate(); if (!Config.Dict.TempSalaryCodeGroupDict.ContainsKey(item.Key)) Config.Dict.TempSalaryCodeGroupDict.Add(item.Key, item.Value); }

		}

		/// <summary>Fills Config.Dict.TempSalaryCodeGroupDict if null or empty</summary><param name="update" />
		public void FillTempSuccessfulRunDict(bool update=false)
		{
			Dictionary<int, SuccessfulRun> tempDict=new();

			if (!update&&Config.Dict.TempSuccessfulRunDict.Count>=1) { foreach (KeyValuePair<int, SuccessfulRun> item in Config.Dict.TempSuccessfulRunDict) if(item.Key>=1&&!tempDict.ContainsKey(item.Key)) { item.Value.Validate(); tempDict.Add(item.Key, item.Value); } Config.Dict.TempSuccessfulRunDict.Clear(); }
			else Config.Dict.TempSalaryCodeGroupDict.Clear();

			if (update||Config.Database.SalaryCodeGroups.Count<1) RefreshSalaryCodeGroups();

			foreach (SuccessfulRun item in Config.Database.SuccessfulRuns) { item.Validate(); if (item.TKey>=1&&!Config.Dict.TempSuccessfulRunDict.ContainsKey(item.TKey)) Config.Dict.TempSuccessfulRunDict.Add(item.TKey, item); }

			if (!update) foreach (KeyValuePair<int, SuccessfulRun> item in tempDict) { item.Value.Validate(); if (!Config.Dict.TempSuccessfulRunDict.ContainsKey(item.Key)) Config.Dict.TempSuccessfulRunDict.Add(item.Key, item.Value); }

		}

		/// <summary>Fills Config.Dict.TempWorkingTimeDict if null or empty</summary><param name="update" />
		public void FillTempWorkingTimeDict(bool update=false)
		{
			Dictionary<int, WorkingTime> tempDict=new();

			if (!update&&Config.Dict.TempWorkingTimeDict.Count>=1) { foreach (KeyValuePair<int, WorkingTime> item in Config.Dict.TempWorkingTimeDict) if(item.Key>=1&&!tempDict.ContainsKey(item.Key)) { item.Value.Validate(); tempDict.Add(item.Key, item.Value); } Config.Dict.TempWorkingTimeDict.Clear(); }
			else Config.Dict.TempWorkingTimeDict.Clear();

			if(update||Config.Database.WorkingTimes.Count<1) RefreshWorkingTimes();

			foreach (WorkingTime item in Config.Database.WorkingTimes) { item.Validate(); if (item.TKey>=1&&!Config.Dict.TempWorkingTimeDict.ContainsKey(item.TKey)) Config.Dict.TempWorkingTimeDict.Add(item.TKey, item); }

			if (!update) foreach (KeyValuePair<int, WorkingTime> item in tempDict) { item.Value.Validate(); if (!Config.Dict.TempWorkingTimeDict.ContainsKey(item.Key)) Config.Dict.TempWorkingTimeDict.Add(item.Key, item.Value); }

		}

		#endregion

		#region Get

		#region Get Current Object
		/// <returns>Config.CurrentInstitution</returns>
		private Institution GetCurrentInstitution()
		{
			if (!string.IsNullOrWhiteSpace(this.Config.CurrentInstitutionIdentifier)&&!this.Config.CurrentInstitutionIdentifier.Equals("NO")&&!Config.CurrentInstitution.IsEmpty()&&Config.CurrentInstitution.InstitutionIdentifier.Equals(this.Config.CurrentInstitutionIdentifier)) return new(this.Config.CurrentInstitution);
			else if (!string.IsNullOrWhiteSpace(this.Config.CurrentInstitutionIdentifier)&&!this.Config.CurrentInstitutionIdentifier.Equals("NO")&&(Config.CurrentInstitution.IsEmpty()||!Config.CurrentInstitution.InstitutionIdentifier.Equals(this.Config.CurrentInstitutionIdentifier))) { SetCurrentInstitution(); return new(this.Config.CurrentInstitution); }
			else if ((string.IsNullOrWhiteSpace(this.Config.CurrentInstitutionIdentifier)||!this.Config.CurrentInstitutionIdentifier.Equals("NO"))&&!Config.CurrentInstitution.IsEmpty()&&Config.CurrentInstitution.InstitutionIdentifier.Equals(this.Config.CurrentInstitutionIdentifier)) { this.Config.CurrentInstitutionIdentifier=this.Config.CurrentInstitution.InstitutionIdentifier; return new(this.Config.CurrentInstitution); }
			else return new();
		}

		/// <returns>Config.CurrentInstitutionIdentifier</returns>
		private string GetCurrentInstitutionIdentifier()
		{
			if (!string.IsNullOrWhiteSpace(this.Config.CurrentInstitutionIdentifier)&&!Config.CurrentInstitutionIdentifier.Equals("NO")&&!Config.CurrentInstitution.IsEmpty()&&Config.CurrentInstitutionIdentifier.Equals(Config.CurrentInstitution.InstitutionIdentifier)) return Config.CurrentInstitutionIdentifier;
			else if (!string.IsNullOrWhiteSpace(this.Config.CurrentInstitutionIdentifier)&&!Config.CurrentInstitutionIdentifier.Equals("NO")&&(Config.CurrentInstitution.IsEmpty()||!Config.CurrentInstitutionIdentifier.Equals(Config.CurrentInstitution.InstitutionIdentifier))) { SetCurrentInstitution(); return Config.CurrentInstitutionIdentifier; }
			else if ((string.IsNullOrWhiteSpace(this.Config.CurrentInstitutionIdentifier)||Config.CurrentInstitutionIdentifier.Equals("NO"))&&!Config.CurrentInstitution.IsEmpty()&&Config.CurrentInstitutionIdentifier.Equals(Config.CurrentInstitution.InstitutionIdentifier)) { Config.CurrentInstitutionIdentifier=Config.CurrentInstitution.InstitutionIdentifier; return Config.CurrentInstitutionIdentifier; }
			else return string.Empty;
		}

		/// <returns>Config.CurrentOrganization</returns><exception cref="InvalidRefException" />
		private Organization GetCurrentOrganization()
		{
			if ((string.IsNullOrWhiteSpace(this.Config.CurrentInstitutionIdentifier)||this.Config.CurrentInstitutionIdentifier.Equals("NO"))&&this.Config.CurrentInstitution.IsEmpty()) throw new InvalidRefException(nameof(this.Config.CurrentInstitutionIdentifier),this.Config.CurrentInstitutionIdentifier,"Cannot update Config.CurrentOrganization if "+nameof(this.Config.CurrentInstitutionIdentifier)+" is not valid.");
			if (this.Config.CurrentInstitution.IsEmpty()||Config.CurrentInstitution.Id<1) SetCurrentInstitution();
			if (this.Config.CurrentOrganization.IsEmpty()) SetCurrentOrganization();
			if (this.Config.CurrentOrganization.Institution.IsEmpty()||this.Config.CurrentOrganization.Institution.Id<1) this.Config.CurrentOrganization.Institution=Config.CurrentInstitution;

			return new Organization(this.Config.CurrentOrganization);

		}

		/// <returns>CurrentOrganizationStructure</returns><exception cref="InvalidRefException" />
		private OrganizationStructure GetCurrentOrganizationStructure()
		{
			if ((string.IsNullOrWhiteSpace(this.Config.CurrentInstitutionIdentifier)||this.Config.CurrentInstitutionIdentifier.Equals("NO"))&&this.Config.CurrentInstitution.IsEmpty()) throw new InvalidRefException(nameof(this.Config.CurrentInstitutionIdentifier),this.Config.CurrentInstitutionIdentifier,"Cannot update Config.CurrentOrganization if "+nameof(this.Config.CurrentInstitutionIdentifier)+" is not valid.");
			if (this.Config.CurrentInstitution.IsEmpty()||Config.CurrentInstitution.Id<1) SetCurrentInstitution();
			if (this.Config.CurrentOrganizationStructure.IsEmpty()) SetCurrentOrganizationStructure();
			if (this.Config.CurrentOrganizationStructure.Institution.IsEmpty()||Config.CurrentOrganizationStructure.Institution.Id<1) Config.CurrentOrganizationStructure.Institution=Config.CurrentInstitution;

			return new OrganizationStructure(this.Config.CurrentOrganizationStructure);

		}

		#endregion

		#region Get Object
		/// <returns>Requested ContactInformation from Database.ContactInformations</returns><param name="id" />
		public ContactInformation GetContactInformation(int id)
		{
			if (id<0) throw new ArgumentInvalidException(nameof(id), id, nameof(id)+" cannot be negative.");
			else if (id.Equals(0)) return new();
			else if (id>=1) foreach (ContactInformation entity in Config.Database.ContactInformations) if (entity.Id.Equals(id)) return entity;
			
			WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Requested Contactinformation with "+id+" does not exist");

			return new();

		}

		/// <returns>Requested ContactInformation from <paramref name="objList"/></returns><param name="objList" />
		public ContactInformation GetContactInformation(List<object> objList) { if (objList.Count >= 1) foreach (ContactInformation entity in objList) if (entity.TelephoneNumberIdentifier1.Equals(Config.MacAddress)) return entity; return new(); }

		/// <returns>Requested Department from Database.Departments</returns><param name="id" />
		public Department GetDepartment(int id)
		{
			if (id<0) throw new ArgumentInvalidException(nameof(id), id, nameof(id)+" cannot be negative.");
			else if (id.Equals(0)) return new();
			else if (id>=1) foreach (Department entity in Config.Database.Departments) if (entity.Id.Equals(id)) return entity;
			
			WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Requested Department with "+id+" does not exist");

			return new();

		}

		/// <returns>Requested Department from <paramref name="objList"/></returns><param name="objList" />
		public Department GetDepartment(List<object> objList) { if (objList.Count >= 1) foreach (Department entity in objList) if (entity.DepartmentUuidIdentifier.Equals(Config.MacAddress)) return entity; return new(); }

		/// <returns>Requested DepartmentLevelReference from Database.DepartmentLevelReferences</returns><param name="id" />
		public DepartmentLevelReference GetDepartmentLevelReference(int id)
		{
			if (id<0) throw new ArgumentInvalidException(nameof(id), id, nameof(id)+" cannot be negative.");
			else if (id.Equals(0)) return new();
			else if (id>=1) foreach (DepartmentLevelReference entity in Config.Database.DepartmentLevelReferences) if (entity.Id.Equals(id)) return entity;
			
			WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Requested DepartmentLevelReference with "+id+" does not exist");

			return new();

		}

		/// <returns>Requested DepartmentLevelReference from <paramref name="objList"/></returns><param name="objList" />
		public DepartmentLevelReference GetDepartmentLevelReference(List<object> objList) { if (objList.Count >= 1) foreach (DepartmentLevelReference entity in objList) if (entity.DepartmentLevelIdentifier.Equals(Config.MacAddress)) return entity; return new(); }

		/// <returns>Requested DepartmentReference from Database.DepartmentReferences</returns><param name="id" />
		public DepartmentReference GetDepartmentReference(int id)
		{
			if (id<0) throw new ArgumentInvalidException(nameof(id), id, nameof(id)+" cannot be negative.");
			else if (id.Equals(0)) return new();
			else if (id>=1) foreach (DepartmentReference entity in Config.Database.DepartmentReferences) if (entity.Id.Equals(id)) return entity;
			
			WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Requested DepartmentReference with "+id+" does not exist");

			return new();

		}

		/// <returns>Requested DepartmentReference from <paramref name="objList"/></returns><param name="objList" />
		public DepartmentReference GetDepartmentReference(List<object> objList) { if (objList.Count >= 1) foreach (DepartmentReference entity in objList) if (entity.DepartmentIdentifier.Equals(Config.MacAddress)) return entity; return new(); }

		/// <returns>Requested DownloadPath from Database.DownloadPaths</returns><param name="id" />
		public DownloadPath GetDownloadPath(int id)
		{
			if (id<0) throw new ArgumentInvalidException(nameof(id), id, nameof(id)+" cannot be negative.");
			else if (id.Equals(0)) return new();
			else if (id>=1) foreach (DownloadPath entity in Config.Database.DownloadPaths) if (entity.Id.Equals(id)) return entity;
			
			WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Requested DownloadPath with "+id+" does not exist");

			return new();

		}

		/// <returns>Requested Department from <paramref name="objList"/></returns><param name="objList" />
		public DownloadPath GetDownloadPath(List<object> objList) { if (objList.Count >= 1) foreach (DownloadPath entity in objList) if (entity.Path.Equals(Config.MacAddress)) return entity; return new(); }

		/// <returns>Requested Employment from Database.Employments</returns><param name="id" />
		public Employment GetEmployment(int id)
		{
			if (id<0) throw new ArgumentInvalidException(nameof(id), id, nameof(id)+" cannot be negative.");
			else if (id.Equals(0)) return new();
			else if (id>=1) foreach (Employment entity in Config.Database.Employments) if (entity.Id.Equals(id)) return entity;
			
			WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Requested Employment with "+id+" does not exist");

			return new();

		}

		/// <returns>Requested Employment from <paramref name="objList"/></returns><param name="objList" />
		public Employment GetEmployment(List<object> objList) { if (objList.Count >= 1) foreach (Employment entity in objList) if (entity.EmploymentIdentifier.Equals(Config.MacAddress)) return entity; return new(); }

		/// <returns>Requested EmploymentStatus from Database.EmploymentStatuses</returns><param name="id" />
		public EmploymentStatus GetEmploymentStatus(int id)
		{
			if (id<0) throw new ArgumentInvalidException(nameof(id), id, nameof(id)+" cannot be negative.");
			else if (id.Equals(0)) return new();
			else if (id>=1) foreach (EmploymentStatus entity in Config.Database.EmploymentStatuses) if (entity.Id.Equals(id)) return entity;
			
			WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Requested EmploymentStatus with "+id+" does not exist");

			return new();

		}

		/// <returns>Requested EmploymentStatus from <paramref name="objList"/></returns><param name="objList" />
		public EmploymentStatus GetEmploymentStatus(List<object> objList) { if (objList.Count >= 1) foreach (EmploymentStatus entity in objList) if (entity.EmploymentStatusCode.Equals(Config.MacAddress)) return entity; return new(); }

		/// <returns>Requested Institution from Database.Institutions</returns><param name="id" />
		public Institution GetInstitution(int id)
		{
			if (id<0) throw new ArgumentInvalidException(nameof(id), id, nameof(id)+" cannot be negative.");
			else if (id.Equals(0)) return new();
			else if (id>=1) foreach (Institution entity in Config.Database.Institutions) if (entity.Id.Equals(id)) return entity;
			
			WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Requested Institution with "+id+" does not exist");

			return new();

		}

		/// <returns>Requested Institution from <paramref name="objList"/></returns><param name="objList" />
		public Institution GetInstitution(List<object> objList) { if (objList.Count >= 1) foreach (Institution entity in objList) if (entity.InstitutionUuidIdentifier.Equals(Config.MacAddress)) return entity; return new(); }
		/// <returns>Requested Organization from Database.Organizations</returns><param name="id" />
		public Organization GetOrganization(int id)
		{
			if (id<0) throw new ArgumentInvalidException(nameof(id), id, nameof(id)+" cannot be negative.");
			else if (id.Equals(0)) return new();
			else if (id>=1) foreach (Organization entity in Config.Database.Organizations) if (entity.Id.Equals(id)) return entity;
			
			WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Requested Organization with "+id+" does not exist");

			return new();

		}

		/// <returns>Requested Organization from <paramref name="objList"/></returns><param name="objList" />
		public Organization GetOrganization(List<object> objList) { if (objList.Count >= 1) foreach (Organization entity in objList) if (entity.OrganizationIdentifier.Equals(Config.MacAddress)) return entity; return new(); }

		/// <returns>Requested OrganizationStructure from Database.OrganizationStructures</returns><param name="id" />
		public OrganizationStructure GetOrganizationStructure(int id)
		{
			if (id<0) throw new ArgumentInvalidException(nameof(id), id, nameof(id)+" cannot be negative.");
			else if (id.Equals(0)) return new();
			else if (id>=1) foreach (OrganizationStructure entity in Config.Database.OrganizationStructures) if (entity.Id.Equals(id)) return entity;
			
			WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Requested OrganizationStructure with "+id+" does not exist");

			return new();

		}

		/// <returns>Requested OrganizationStructure from <paramref name="objList"/></returns><param name="objList" />
		public OrganizationStructure GetOrganizationStructure(List<object> objList) { if (objList.Count >= 1) foreach (OrganizationStructure entity in objList) if (entity.OrganizationStructureIdentifier.Equals(Config.MacAddress)) return entity; return new(); }

		/// <returns>Requested Person from Database.Persons</returns><param name="id" />
		public Person GetPerson(int id)
		{
			if (id<0) throw new ArgumentInvalidException(nameof(id), id, nameof(id)+" cannot be negative.");
			else if (id.Equals(0)) return new();
			else if (id>=1) foreach (Person entity in Config.Database.Persons) if (entity.Id.Equals(id)) return entity;
			
			WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Requested Person with "+id+" does not exist");

			return new();

		}

		/// <returns>Requested Person from <paramref name="objList"/></returns><param name="objList" />
		public Person GetPerson(List<object> objList) { if (objList.Count >= 1) foreach (Person entity in objList) if (entity.PersonCivilRegistrationIdentifier.Equals(Config.MacAddress)) return entity; return new(); }

		/// <returns>Requested PostalAddress from Database.PostalAddresses</returns><param name="id" />
		public PostalAddress GetPostalAddress(int id)
		{
			if (id<0) throw new ArgumentInvalidException(nameof(id), id, nameof(id)+" cannot be negative.");
			else if (id.Equals(0)) return new();
			else if (id>=1) foreach (PostalAddress entity in Config.Database.PostalAddresses) if (entity.Id.Equals(id)) return entity;
			
			WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Requested PostalAddress with "+id+" does not exist");

			return new();

		}

		/// <returns>Requested PostalAddress from <paramref name="objList"/></returns><param name="objList" />
		public PostalAddress GetPostalAddress(List<object> objList) { if (objList.Count >= 1) foreach (PostalAddress entity in objList) if (entity.StandardAddressIdentifier.Equals(Config.MacAddress)) return entity; return new(); }

		/// <returns>Requested Profession from Database.Professions</returns><param name="id" />
		public Profession GetProfession(int id)
		{
			if (id<0) throw new ArgumentInvalidException(nameof(id), id, nameof(id)+" cannot be negative.");
			else if (id.Equals(0)) return new();
			else if (id>=1) foreach (Profession entity in Config.Database.Professions) if (entity.Id.Equals(id)) return entity;
			
			WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Requested Profession with "+id+" does not exist");

			return new();

		}

		/// <returns>Requested Profession from <paramref name="objList"/></returns><param name="objList" />
		public Profession GetProfession(List<object> objList) { if (objList.Count >= 1) foreach (Profession entity in objList) if (entity.JobPositionIdentifier.Equals(Config.MacAddress)) return entity; return new(); }
		/// <returns>Requested SalaryAgreement from Database.SalaryAgreements</returns><param name="id" />
		public SalaryAgreement GetSalaryAgreement(int id)
		{
			if (id<0) throw new ArgumentInvalidException(nameof(id), id, nameof(id)+" cannot be negative.");
			else if (id.Equals(0)) return new();
			else if (id>=1) foreach (SalaryAgreement entity in Config.Database.SalaryAgreements) if (entity.Id.Equals(id)) return entity;
			
			WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Requested SalaryAgreement with "+id+" does not exist");

			return new();

		}

		/// <returns>Requested SalaryAgreement from <paramref name="objList"/></returns><param name="objList" />
		public SalaryAgreement GetSalaryAgreement(List<object> objList) { if (objList.Count >= 1) foreach (SalaryAgreement entity in objList) if (entity.SalaryAgreementIdentifier.Equals(Config.MacAddress)) return entity; return new(); }

		/// <returns>Requested SalaryCodeGroup from Database.SalaryCodeGroups</returns><param name="id" />
		public SalaryCodeGroup GetSalaryCodeGroup(int id)
		{
			if (id<0) throw new ArgumentInvalidException(nameof(id), id, nameof(id)+" cannot be negative.");
			else if (id.Equals(0)) return new();
			else if (id>=1) foreach (SalaryCodeGroup entity in Config.Database.SalaryCodeGroups) if (entity.Id.Equals(id)) return entity;
			
			WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Requested SalaryCodeGroup with "+id+" does not exist");

			return new();

		}

		/// <returns>Requested SalaryCodeGroup from <paramref name="objList"/></returns><param name="objList" />
		public SalaryCodeGroup GetSalaryCodeGroup(List<object> objList) { if (objList.Count >= 1) foreach (SalaryCodeGroup entity in objList) if (entity.PensionCode.Equals(Config.MacAddress)) return entity; return new(); }

		/// <returns>Requested SuccessfulRun from Database.SuccessfulRuns</returns><param name="id" />
		public SuccessfulRun GetSuccessfulRun(int id)
		{
			if (id<0) throw new ArgumentInvalidException(nameof(id), id, nameof(id)+" cannot be negative.");
			else if (id.Equals(0)) return new();
			else if (id>=1) foreach (SuccessfulRun entity in Config.Database.SuccessfulRuns) if (entity.Id.Equals(id)) return entity;
			
			WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Requested SuccessfulRun with "+id+" does not exist");

			return new();

		}

		/// <returns>Requested SuccessfulRun from <paramref name="objList"/></returns><param name="objList" />
		public SuccessfulRun GetSuccessfulRun(List<object> objList) { if (objList.Count >= 1) foreach (SuccessfulRun entity in objList) if (entity.RunMode.Equals(Config.MacAddress)) return entity; return new(); }

		/// <returns>Requested WorkingTime from Database.WorkingTimes</returns><param name="id" />
		public WorkingTime GetWorkingTime(int id)
		{
			if (id<0) throw new ArgumentInvalidException(nameof(id), id, nameof(id)+" cannot be negative.");
			else if (id.Equals(0)) return new();
			else if (id>=1) foreach (WorkingTime entity in Config.Database.WorkingTimes) if (entity.Id.Equals(id)) return entity;
			
			WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Requested WorkingTime with "+id+" does not exist");

			return new();

		}

		/// <returns>Requested WorkingTime from <paramref name="objList"/></returns><param name="objList" />
		public WorkingTime GetWorkingTime(List<object> objList) { if (objList.Count >= 1) foreach (WorkingTime entity in objList) if (entity.OccupationRate.Equals(Config.MacAddress)) return entity; return new(); }

		#endregion

		#region Get Object Id
		/// <summary>
		/// Returns a <see cref="ContactInformation"/> id as <see cref="int"/>
		/// </summary>
		/// <param name="objList">List {object}</param>
		/// <returns>Result as int</returns>
		private int GetContactInformationId(List<object> objList)
		{
			return GetContactInformation(objList).Id;
		}

		/// <summary>
		/// Returns a <see cref="Department"/> id as <see cref="int"/>
		/// </summary>
		/// <param name="objList">List {object}</param>
		/// <returns>Result as int</returns>
		private int GetDepartmentId(List<object> objList)
		{
			return GetDepartment(objList).Id;
		}

		/// <summary>
		/// Returns a <see cref="DepartmentLevelReference"/> id as <see cref="int"/>
		/// </summary>
		/// <param name="objList">List {object}</param>
		/// <returns>Result as int</returns>
		private int GetDepartmentLevelReferenceId(List<object> objList)
		{
			return GetDepartmentLevelReference(objList).Id;
		}

		/// <summary>
		/// Returns a <see cref="DepartmentReference"/> id as <see cref="int"/>
		/// </summary>
		/// <param name="objList">List {object}</param>
		/// <returns>Result as int</returns>
		private int GetDepartmentReferenceId(List<object> objList)
		{
			return GetDepartmentReference(objList).Id;
		}

		/// <summary>
		/// Returns a <see cref="Employment"/> id as <see cref="int"/>
		/// </summary>
		/// <param name="objList">List {object}</param>
		/// <returns>Result as int</returns>
		private int GetEmploymentId(List<object> objList)
		{
			return GetEmployment(objList).Id;
		}

		/// <summary>
		/// Returns a <see cref="EmploymentStatus"/> id as <see cref="int"/>
		/// </summary>
		/// <param name="objList">List {object}</param>
		/// <returns>Result as int</returns>
		private int GetEmploymentStatusId(List<object> objList)
		{
			return GetEmploymentStatus(objList).Id;
		}

		/// <summary>
		/// Returns a <see cref="Institution"/> id as <see cref="int"/>
		/// </summary>
		/// <param name="objList">List {object}</param>
		/// <returns>Result as int</returns>
		private int GetInstitutionId(List<object> objList)
		{
			return GetInstitution(objList).Id;
		}

		/// <summary>
		/// Returns a <see cref="Organization"/> id as <see cref="int"/>
		/// </summary>
		/// <param name="objList">List {object}</param>
		/// <returns>Result as int</returns>
		private int GetOrganizationId(List<object> objList)
		{
			return GetOrganization(objList).Id;
		}

		/// <summary>
		/// Returns a <see cref="OrganizationStructure"/> id as <see cref="int"/>
		/// </summary>
		/// <param name="objList">List {object}</param>
		/// <returns>Result as int</returns>
		private int GetOrganizationStructureId(List<object> objList)
		{
			return GetOrganizationStructure(objList).Id;
		}

		/// <summary>
		/// Returns a <see cref="Person"/> id as <see cref="int"/>
		/// </summary>
		/// <param name="objList">List {object}</param>
		/// <returns>Result as int</returns>
		private int GetPersonId(List<object> objList)
		{
			return GetPerson(objList).Id;
		}

		/// <summary>
		/// Returns a <see cref="PostalAddress"/> id as <see cref="int"/>
		/// </summary>
		/// <param name="objList">List {object}</param>
		/// <returns>Result as int</returns>
		private int GetPostalAddressId(List<object> objList)
		{
			return GetPostalAddress(objList).Id;
		}

		/// <summary>
		/// Returns a <see cref="Profession"/> id as <see cref="int"/>
		/// </summary>
		/// <param name="objList">List {object}</param>
		/// <returns>Result as int</returns>
		private int GetProfessionId(List<object> objList)
		{
			return GetProfession(objList).Id;
		}

		/// <summary>
		/// Returns a <see cref="SalaryAgreement"/> id as <see cref="int"/>
		/// </summary>
		/// <param name="objList">List {object}</param>
		/// <returns>Result as int</returns>
		private int GetSalaryAgreementId(List<object> objList)
		{
			return GetSalaryAgreement(objList).Id;
		}

		/// <summary>
		/// Returns a <see cref="SalaryCodeGroup"/> id as <see cref="int"/>
		/// </summary>
		/// <param name="objList">List {object}</param>
		/// <returns>Result as int</returns>
		private int GetSalaryCodeGroupId(List<object> objList)
		{
			return GetSalaryCodeGroup(objList).Id;
		}

		/// <summary>
		/// Returns a <see cref="SuccessfulRun"/> id as <see cref="int"/>
		/// </summary>
		/// <param name="objList">List {object}</param>
		/// <returns>Result as int</returns>
		private int GetSuccessfulRunId(List<object> objList)
		{
			return GetSuccessfulRun(objList).Id;
		}

		/// <summary>
		/// Returns a <see cref="WorkingTime"/> id as <see cref="int"/>
		/// </summary>
		/// <param name="objList">List {object}</param>
		/// <returns>Result as int</returns>
		private int GetWorkingTimeId(List<object> objList)
		{
			return GetWorkingTime(objList).Id;
		}

		#endregion

		/// <returns>Entity type from a list name as string</returns><param name="list">string</param>
		private string GetEntityTypeFromListName(string list)
		{
			return list switch
			{
				"ContactInformations" => "ContactInformation",
				"Departments" => "Department",
				"DepartmentLevelReferences" => "DepartmentLevelReference",
				"DepartmentReferences" => "DepartmentReference",
				"DownloadPaths" => "DownloadPath",
				"Employments" => "Employment",
				"EmploymentStatuses" => "EmploymentStatus",
				"Institutions" => "Institution",
				"Organizations" => "Organization",
				"OrganizationStructures" => "OrganizationStructure",
				"Persons" => "Person",
				"PostalAddresses" => "PostalAddress",
				"Professions" => "Profession",
				"SalaryAgreements" => "SalaryAgreement",
				"SalaryCodeGroups" => "SalaryCodeGroup",
				"SdAdRelations" => "SdAdRelation",
				"SuccessfulRuns" => "SuccessfulRun",
				"WorkingTimes" => "WorkingTime",
				_ => throw new ArgumentInvalidException(nameof(list), list, nameof(list)+Error.UnkParam),
			};
		}

		/// <returns>Amount of fields as int</returns><param name="list" />
		private int GetFieldAmount(string list)
		{
			return list switch
			{
				"ContactInformations" => 5,
				"Departments" => 12,
				"DepartmentLevelReferences" => 5,
				"DepartmentReferences" => 7,
				"Employments" => 13,
				"EmploymentStatuses" => 6,
				"Institutions" => 11,
				"Organizations" => 6,
				"OrganizationStructures" => 3,
				"Persons" => 8,
				"PostalAddresses" => 6,
				"Professions" => 11,
				"SalaryAgreements" => 9,
				"SalaryCodeGroups" => 5,
				"SdAdRelations" => 4,
				"SuccessfulRuns" => 3,
				"WorkingTimes" => 9,
				_ => throw new ArgumentInvalidException(nameof(list), list, nameof(list)+Error.UnkParam),
			};
		}

		/// <returns>List name from an entity type as string</returns><param name="entityType" />
		private string GetListNameFromEntityType(string entityType)
		{
			return entityType switch
			{
				"ContactInformation" => "ContactInformations",
				"Department" => "Departments",
				"DepartmentLevelReference" => "DepartmentLevelReferences",
				"DepartmentReference" => "DepartmentReferences",
				"Employment" => "Employments",
				"EmploymentStatus" => "EmploymentStatuses",
				"Institution" => "Institutions",
				"Organization" => "Organizations",
				"OrganizationStructure" => "OrganizationStructures",
				"Person" => "Persons",
				"PostalAddress" => "PostalAddresses",
				"Profession" => "Professions",
				"SalaryAgreement" => "SalaryAgreements",
				"SalaryCodeGroup" => "SalaryCodeGroups",
				"SdAdRelation" => "SdAdRelations",
				"SuccessfulRun" => "SuccessfulRuns",
				"WorkingTime" => "WorkingTimes",
				_ => throw new ArgumentInvalidException(nameof(entityType), entityType, nameof(entityType)+Error.UnkParam),
			};
		}

		/// <returns>Clone of <paramref name="obj"/> as T</returns><typeparam name="T" /><param name="obj" />
		private T GetShallowCopy<T>(T obj) where T : class { Converter<object, object> _memberwiseClone=(Converter<object, object>)Delegate.CreateDelegate(typeof(Converter<object, object>), typeof(object).GetMethod("MemberwiseClone", BindingFlags.NonPublic | BindingFlags.Instance)); return (T)_memberwiseClone(obj); }

		#endregion

		#region Refresh Lists
		/// <summary>Refreshes the requested list from Database</summary><param name="list" /><param name="allLists" />
		public void RefreshList(string list,bool allLists=false)
		{
			switch (list)
			{
				case "ContactInformations": RefreshContactInformations(); break;
				case "Departments": RefreshDepartments(allLists); break;
				case "DepartmentLevelRerences": RefreshDepartmentLevelReferences(allLists); break;
				case "DepartmentReferences": RefreshDepartmentReferences(allLists); break;
				case "DownloadPaths": RefreshDownloadPaths(); break;
				case "Employments": RefreshEmployments(allLists); break;
				case "EmploymentStatuses": RefreshEmploymentStatuses(); break;
				case "Institutions": RefreshInstitutions(allLists); break;
				case "Organizations": RefreshOrganizations(allLists); break;
				case "OrganizationStructures": RefreshOrganizationStructures(allLists); break;
				case "PostalAddresses": RefreshPostalAddresses(); break;
				case "Persons": RefreshPersons(allLists); break;
				case "Professions": RefreshProfessions(allLists); break;
				case "SalaryAgreements": RefreshSalaryAgreements(); break;
				case "SalaryCodeGroups": RefreshSalaryCodeGroups(); break;
				case "SuccessfulRuns": RefreshSuccessfulRuns(); break;
				case "WorkingTimes": RefreshWorkingTimes(); break;
			}
		}

		/// <summary>Refreshes all lists in Database</summary>
		public void RefreshAllLists()
		{
			try
			{
				RefreshSuccessfulRuns();
				RefreshDownloadPaths();
				RefreshPostalAddresses();
				RefreshContactInformations();
				RefreshEmploymentStatuses();
				RefreshSalaryAgreements();
				RefreshSalaryCodeGroups();
				RefreshWorkingTimes();

				//Second level Lists
				RefreshInstitutions(true);

				//Third level list
				RefreshDepartments(true);
				RefreshOrganizationStructures(true);
				RefreshOrganizations(true);
				RefreshPersons(true);
				RefreshProfessions(true);

				//Fourth Level List
				RefreshEmployments(true);
				RefreshDepartmentLevelReferences(true);
				RefreshDepartmentReferences(true);

			}
			catch (Exception)
			{
				throw;
			}

		}

		/// <summary>Refreshes the Config.Database.ContactInformations list</summary>
		private void RefreshContactInformations()
		{
			Config.Database.ContactInformations.Clear();

			//List<object> tempList=ReadListFromDb("ContactInformations");

			List<object> tempList=ReadListFromDbFromStoredProcedure<object>("SelectContactInformations");

			foreach (ContactInformation info in tempList)
			{
				Config.Database.ContactInformations.Add(info);
			}
		}

		/// <summary>Refreshes the Config.Database.Departments list</summary><param name="allLists">bool</param>
		private void RefreshDepartments(bool allLists=false)
		{
			Config.Database.Departments.Clear();

			if (!allLists)
			{
				RefreshInstitutions();
				RefreshContactInformations();
				RefreshPostalAddresses();
			}

			//List<object> tempList=ReadListFromDb("Departments");
			List<object> tempList=ReadListFromDbFromStoredProcedure<object>("SelectDepartments");


			foreach (Department dept in tempList)
			{
				Config.Database.Departments.Add(dept);
			}
		}

		/// <summary>Refreshes the Config.Database.DepartmentLevelReferences list</summary><param name="allLists">bool</param>
		private void RefreshDepartmentLevelReferences(bool allLists=false)
		{
			Config.Database.DepartmentLevelReferences=new List<DepartmentLevelReference>();


			if (!allLists)
			{
				RefreshOrganizationStructures();
			}

			//List<object> tempList=ReadListFromDb("DepartmentLevelReferences");
			List<object> tempList=ReadListFromDbFromStoredProcedure<object>("SelectDepartmentLevelReferences");

			foreach (DepartmentLevelReference deptLevelReference in tempList)
			{
				Config.Database.DepartmentLevelReferences.Add(deptLevelReference);
			}

		}

		/// <summary>Refreshes the Config.Database.DepartmentReferences list</summary><param name="allLists">bool</param>
		private void RefreshDepartmentReferences(bool allLists=false)
		{
			Config.Database.DepartmentReferences=new List<DepartmentReference>();

			if (!allLists)
			{
				RefreshOrganizations();
			}

			//List<object> tempList=ReadListFromDb("DepartmentReferences");
			List<object> tempList=ReadListFromDbFromStoredProcedure<object>("SelectDepartmentReferences");


			foreach (DepartmentReference deptReference in tempList)
			{
				Config.Database.DepartmentReferences.Add(deptReference);
			}

		}

		/// <summary>Refreshes the Config.Database.DownloadPaths list</summary>
		private void RefreshDownloadPaths()
		{
			Config.Database.DownloadPaths.Clear();

			//List<object> tempList=ReadListFromDbFromStoredProcedure("SelectDownloadPaths");
			List<object> tempList=ReadListFromDbFromStoredProcedure<object>("SelectDownloadPaths");


			foreach (DownloadPath path in tempList)
			{
				Config.Database.DownloadPaths.Add(path);
			}

		}

		/// <summary>Refreshes the Config.Database.Employments list</summary><param name="allLists">bool</param>
		private void RefreshEmployments(bool allLists=false)
		{
			Config.Database.Employments.Clear();

			if (!allLists)
			{
				RefreshDepartments();
				RefreshProfessions();
				RefreshEmploymentStatuses();
				RefreshSalaryAgreements();
				RefreshSalaryCodeGroups();
				RefreshWorkingTimes();
				RefreshInstitutions();
			}

			//List<object> tempList=ReadListFromDb("Employments");
			List<object> tempList=ReadListFromDbFromStoredProcedure<object>("SelectEmployments");


			foreach (Employment emp in tempList)
			{
				Config.Database.Employments.Add(emp);
			}

		}

		/// <summary>Refreshes the Config.Database.EmploymentStatuses list</summary>
		private void RefreshEmploymentStatuses()
		{
			Config.Database.EmploymentStatuses.Clear();

			//List<object> tempList=ReadListFromDb("EmploymentStatuses");
			List<object> tempList=ReadListFromDbFromStoredProcedure<object>("SelectEmploymentStatuses");


			foreach (EmploymentStatus status in tempList)
			{
				Config.Database.EmploymentStatuses.Add(status);
			}

		}

		/// <summary>Refreshes the Config.Database.Institutions list</summary><param name="allLists">bool</param>
		private void RefreshInstitutions(bool allLists=false)
		{
			Config.Database.Institutions.Clear();

			if (!allLists)
			{
				RefreshPostalAddresses();
				RefreshContactInformations();
			}

			//List<object> tempList=ReadListFromDb("Institutions");
			List<object> tempList=ReadListFromDbFromStoredProcedure<object>("SelectInstitutions");


			foreach (Institution inst in tempList)
			{
				Config.Database.Institutions.Add(inst);
			}

		}

		/// <summary>Refreshes the Config.Database.Organizations list</summary><param name="allLists">bool</param>
		private void RefreshOrganizations(bool allLists=false)
		{
			Config.Database.Organizations.Clear();

			if (!allLists)
			{
				RefreshInstitutions();
			}

			//List<object> tempList=ReadListFromDb("Organizations");
			List<object> tempList=ReadListFromDbFromStoredProcedure<object>("SelectOrganizations");


			foreach (Organization org in tempList)
			{
				Config.Database.Organizations.Add(org);
			}
		}

		/// <summary>Refreshes the Config.Database.OrganizationStructures list</summary><param name="allLists">bool</param>
		public void RefreshOrganizationStructures(bool allLists=false)
		{
			Config.Database.OrganizationStructures.Clear();

			if (!allLists)
			{
				RefreshInstitutions();
			}

			//List<object> tempList=ReadListFromDb("OrganizationStructures");
			List<object> tempList=ReadListFromDbFromStoredProcedure<object>("SelectOrganizationStructures");


			foreach (OrganizationStructure structure in tempList)
			{
				Config.Database.OrganizationStructures.Add(structure);
			}

		}

		/// <summary>Refreshes the Config.Database.Persons list</summary><param name="allLists">bool</param>
		public void RefreshPersons(bool allLists=false)
		{
			Config.Database.Persons.Clear();

			if (!allLists)
			{
				RefreshInstitutions();
				RefreshPostalAddresses();
				RefreshContactInformations();
			}

			//List<object> tempList=ReadListFromDb("Persons");
			List<object> tempList=ReadListFromDbFromStoredProcedure<object>("SelectPersons");


			foreach (Person pers in tempList)
			{
				Config.Database.Persons.Add(pers);
			}

		}

		/// <summary>Refreshes the Config.Database.PostalAddresses list</summary>
		public void RefreshPostalAddresses()
		{
			Config.Database.PostalAddresses.Clear();

			//List<object> tempList=ReadListFromDb("PostalAddresses");
			List<object> tempList=ReadListFromDbFromStoredProcedure<object>("SelectPostalAddresses");


			foreach (PostalAddress address in tempList)
			{
				Config.Database.PostalAddresses.Add(address);
			}
		}

		/// <summary>Refreshes the Config.Database.Professions list</summary><param name="allLists">bool</param>
		public void RefreshProfessions(bool allLists=false)
		{
			Config.Database.Professions.Clear();

			if (!allLists)
			{
				RefreshInstitutions();
			}

			//List<object> tempList=ReadListFromDb("Professions");
			List<object> tempList=ReadListFromDbFromStoredProcedure<object>("SelectProfessions");


			foreach (Profession prof in tempList)
			{
				Config.Database.Professions.Add(prof);
			}

		}

		/// <summary>Refreshes the Config.Database.SalaryAgreements list</summary>
		public void RefreshSalaryAgreements()
		{
			Config.Database.SalaryAgreements.Clear();

			//List<object> tempList=ReadListFromDb("SalaryAgreements");
			List<object> tempList=ReadListFromDbFromStoredProcedure<object>("SelectSalaryAgreements");

			foreach (SalaryAgreement aggreement in tempList)
			{
				Config.Database.SalaryAgreements.Add(aggreement);
			}

		}

		/// <summary>Refreshes the Config.Database.SalaryCodeGroups list</summary>
		public void RefreshSalaryCodeGroups()
		{
			Config.Database.SalaryCodeGroups.Clear();

			//List<object> tempList=ReadListFromDb("SalaryCodeGroups");
			List<object> tempList=ReadListFromDbFromStoredProcedure<object>("SelectSalaryCodeGroups");

			foreach (SalaryCodeGroup codeGroup in tempList)
			{
				Config.Database.SalaryCodeGroups.Add(codeGroup);
			}

		}

		/// <summary>Refreshes the Config.Database.SuccessfulRuns list</summary>
		public void RefreshSuccessfulRuns()
		{
			Config.Database.SuccessfulRuns.Clear();

			//List<object> tempList=ReadListFromDb("SuccessfulRuns");
			List<object> tempList=ReadListFromDbFromStoredProcedure<object>("SelectSuccessfulRuns");


			foreach (SuccessfulRun run in tempList)
			{
				Config.Database.SuccessfulRuns.Add(run);
			}
		}

		/// <summary>Refreshes the Config.Database.WorkingTimes list</summary>
		public void RefreshWorkingTimes()
		{
			Config.Database.WorkingTimes.Clear();

			//List<object> tempList=ReadListFromDb("WorkingTimes");
			List<object> tempList=ReadListFromDbFromStoredProcedure<object>("SelectWorkingTimes");


			foreach (WorkingTime run in tempList)
			{
				Config.Database.WorkingTimes.Add(run);
			}
		}

		#endregion

		#region Retrieve

		#region Retrieve Entity
		/// <returns>Requested ContactInformation</returns><param name="entity" />
		public ContactInformation RetrieveContactInformation(ContactInformation entity)
		{
			if (!entity.IsEmpty()) { FillTempContactInformationDict(); if (Config.Dict.TempContactInformationDict.ContainsKey(entity.TKey)) return Config.Dict.TempContactInformationDict[entity.TKey]; }
			return new(entity);
		}

		/// <returns>Requested Department</returns><param name="entity" />
		public Department RetrieveDepartment(Department entity)
		{
			if (!entity.TKey.Equals("00000000-0000-0000-0000-000000000000")) { FillTempDepartmentDict(); if (Config.Dict.TempDepartmentDict.ContainsKey(entity.TKey)) return Config.Dict.TempDepartmentDict[entity.TKey]; }
			return new(entity);
		}

		/// <returns>Requested Institution</returns><param name="entity" />
		public Institution RetrieveDepartmentInstitution(Department entity) { if (!entity.DepartmentUuidIdentifier.Equals("00000000-0000-0000-0000-000000000000")) { FillTempDepartmentDict(); if (Config.Dict.TempDepartmentDict.ContainsKey(entity.TKey)) 
			entity=Config.Dict.TempDepartmentDict[entity.TKey]; return entity.Institution; } return new(); }

		/// <returns>Requested DepartmentLevelReference</returns><param name="entity" />
		public DepartmentLevelReference RetrieveDepartmentLevelReference(DepartmentLevelReference entity) { if (!entity.DepartmentLevelUniqueIdentifier.Equals("NO-NY0-niveau")) { FillTempDepartmentLevelReferenceDict(); 
			if (Config.Dict.TempDepartmentLevelReferenceDict.ContainsKey(entity.TKey)) return Config.Dict.TempDepartmentLevelReferenceDict[entity.TKey]; } return new(entity); }

		/// <returns>Requested DepartmentReference</returns><param name="entity" />
		public DepartmentReference RetrieveDepartmentReference(DepartmentReference entity) { if (!entity.DepartmentReferenceIdentifier.Equals("NO-0NONE")) { FillTempDepartmentReferenceDict(); if (Config.Dict.TempDepartmentReferenceDict.ContainsKey(entity.TKey)) 
			return Config.Dict.TempDepartmentReferenceDict[entity.TKey]; } return new(entity); }

		/// <returns>Requested DownloadPath</returns><param name="entity" />
		public DownloadPath RetrieveDownloadPath(DownloadPath entity) { if (!entity.IsEmpty()) { FillDownloadPathsDict(); if (Config.Dict.DownloadPathDict.ContainsKey(entity.TKey)) return Config.Dict.DownloadPathDict[entity.TKey]; } return new(entity); }

		/// <returns>Requested Employment</returns><param name="entity" />
		public Employment RetrieveEmployment(Employment entity) { if (!entity.TKey.Equals("NO-00000")) { FillTempEmploymentDict(); if (Config.Dict.TempEmploymentDict.ContainsKey(entity.TKey)) return Config.Dict.TempEmploymentDict[entity.TKey]; } return new(entity); }

		/// <returns>Requested EmploymentStatus</returns><param name="entity" />
		public EmploymentStatus RetrieveEmploymentStatus(EmploymentStatus entity) { if (entity.TKey >= 1) { FillTempEmploymentStatusDict(); if (Config.Dict.TempEmploymentStatusDict.ContainsKey(entity.TKey)) return Config.Dict.TempEmploymentStatusDict[entity.TKey]; } return new(); }

		/// <returns>Requested Institution</returns><param name="entity" />
		public Institution RetrieveInstitution(Institution entity) { if (!entity.TKey.Equals("NO")) { FillTempInstitutionDict(); if (Config.Dict.TempInstitutionDict.ContainsKey(entity.TKey)) return Config.Dict.TempInstitutionDict[entity.TKey]; } return new(entity); }

		/// <returns>Requested Organization</returns><param name="entity" />
		public Organization RetrieveOrganization(Organization entity) { if (!entity.TKey.Equals("NO-Organization")) { FillTempOrganizationDict(); if (Config.Dict.TempOrganizationDict.ContainsKey(entity.TKey)) return Config.Dict.TempOrganizationDict[entity.TKey]; } return new(entity); }

		/// <returns>Requested OrganizationStructure</returns><param name="entity" />
		public OrganizationStructure RetrieveOrganizationStructure(OrganizationStructure entity) { if (!entity.TKey.Equals("NO-Basis")) { FillTempOrganizationStructureDict(); if (Config.Dict.TempOrganizationStructureDict.ContainsKey(entity.TKey)) return Config.Dict.TempOrganizationStructureDict[entity.TKey]; } return new(entity); }

		/// <returns>Requested Person</returns><param name="entity" />
		public Person RetrievePerson(Person entity) { if (!entity.TKey.Equals("NO-0101001234")) { FillTempPersonDict(); if (Config.Dict.TempPersonDict.ContainsKey(entity.TKey)) return Config.Dict.TempPersonDict[entity.TKey]; } return new(entity); }

		/// <returns>Requested PostalAddress</returns><param name="entity" />
		public PostalAddress RetrievePostalAddress(PostalAddress entity) { if (entity.TKey>=1) { FillTempPostalAddressDict(); if (Config.Dict.TempPostalAddressDict.ContainsKey(entity.TKey)) return Config.Dict.TempPostalAddressDict[entity.TKey]; } return new(entity); }

		/// <returns>Requested Profession</returns><param name="entity" />
		public Profession RetrieveProfession(Profession entity) { if (!entity.TKey.Equals("NO-0000")) { FillTempProfessionDict(); if (Config.Dict.TempProfessionDict.ContainsKey(entity.TKey)) return Config.Dict.TempProfessionDict[entity.TKey]; } return new(entity); }

		/// <returns>Requested SalaryAgreement</returns><param name="entity" />
		public SalaryAgreement RetrieveSalaryAgreement(SalaryAgreement entity) { if (entity.TKey >= 1) { FillTempSalaryAgreementDict(); if (Config.Dict.TempSalaryAgreementDict.ContainsKey(entity.TKey)) return Config.Dict.TempSalaryAgreementDict[entity.TKey]; } return new(entity); }

		/// <returns>Requested SalaryCodeGroup</returns><param name="entity" />
		public SalaryCodeGroup RetrieveSalaryCodeGroup(SalaryCodeGroup entity) { if (entity.TKey >= 1) { FillTempSalaryCodeGroupDict(); if (Config.Dict.TempSalaryCodeGroupDict.ContainsKey(entity.TKey)) return Config.Dict.TempSalaryCodeGroupDict[entity.TKey]; } return new(entity); }

		/// <returns>Requested SuccessfulRun</returns><param name="entity" />
		public SuccessfulRun RetrieveSuccessfulRun(SuccessfulRun entity) { if (entity.TKey >= 1) { FillTempSuccessfulRunDict(); if (Config.Dict.TempSuccessfulRunDict.ContainsKey(entity.TKey)) return Config.Dict.TempSuccessfulRunDict[entity.TKey]; } return new(entity); }

		/// <returns>Requested WorkingTime</returns><param name="entity" />
		public WorkingTime RetrieveWorkingTime(WorkingTime entity) { if (entity.TKey >= 1) { FillTempWorkingTimeDict(); if (Config.Dict.TempWorkingTimeDict.ContainsKey(entity.TKey)) return Config.Dict.TempWorkingTimeDict[entity.TKey]; } return new(entity); }

		#endregion

		#region Retrieve Entity from Id
		/// <returns>Requested Institution</returns><param name="instId" />
		public Institution RetrieveInstitution(string instId)
		{
			if (Config.CurrentInstitution.InstitutionIdentifier.Equals(instId)) return Config.CurrentInstitution;

			Institution result=new();

			if (Config.Database.Institutions.Count <= 1)
			{
				RefreshInstitutions();
			}

			if (Config.Database.Institutions.Count >= 2 && instId != null)
			{
				if (instId.Length >= 1)
				{
					if (!instId.Equals("NO"))
					{
						foreach (Institution institution in Config.Database.Institutions)
						{
							if (institution.InstitutionIdentifier.Equals(instId))
							{
								result=institution;
								break;
							}
						}
					}
				}
			}

			return result;

		}

		#endregion

		#region Retrieve Entity Id
		/// <returns>Id of a recently created ContactInformation as int</returns>
		private int RetrieveContactInformationId() => ((ContactInformation)ReadPostFromDb("ContactInformations")).Id;

		/// <returns>Id of <paramref name="entity"/> as int</returns><param name="entity" />
		public int RetrieveContactInformationId(ContactInformation entity)
		{
			if(entity.IsEmpty()) return 0;

			int result=0;

			//Fast retrieve id
			result=RetrieveContactInformation(entity).Id;

			//When fast retrieve fails: Refresh list and retrieve id again
			if (result<1) { RefreshContactInformations(); result=RetrieveContactInformation(entity).Id; }

			//Log error if Id is stil 0
			if (result<1) WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Could not retrieve Id for "+entity.ToLongString());

			return result;

		}

		/// <returns>Id of a recently created Department as int</returns>
		private int RetrieveDepartmentId() => ((Department)ReadPostFromDb("Departments")).Id;

		/// <returns>Id of <paramref name="entity"/> as int</returns><param name="entity" /><param name="updateEntity" />
		public int RetrieveDepartmentId(Department entity, bool updateEntity=false)
		{
			if(entity.IsEmpty()) return 0;

			int result=0;

			if (entity.Institution.IsEmpty()) { entity.Institution=Config.CurrentInstitution; entity.Institution.Validate(); }

			entity.Validate();
			result=RetrieveDepartment(entity).Id;

			if (!updateEntity)
			{
				//When fast retrieve fails: Refresh list and retrieve id again
				if (result.Equals(0)) { RefreshDepartments(); result=RetrieveDepartment(entity).Id; }

				//Log error if Id is stil 0
				if (result.Equals(0)) WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Could not retrieve Id for "+entity.TKey);

			}

			return result;

		}

		/// <returns>Id of a recently created DepartmentLevelReference as int</returns>
		private int RetrieveDepartmentLevelReferenceId() => ((DepartmentLevelReference)ReadPostFromDb("DepartmentLevelReferences")).Id;

		/// <returns>Id of <paramref name="entity"/> as int</returns><param name="entity" /><param name="updateEntity" />
		public int RetrieveDepartmentLevelReferenceId(DepartmentLevelReference entity, bool updateEntity=false)
		{
			if(entity.IsEmpty()) return 0;

			int result=0;

			//Fast retrieve id
			entity.Validate();
			result=RetrieveDepartmentLevelReference(entity).Id;

			if (!updateEntity)
			{
				//When fast retrieve fails: Refresh list and retrieve id again
				if (result.Equals(0)) { RefreshDepartmentLevelReferences(); result=RetrieveDepartmentLevelReference(entity).Id; }

				//Log error if Id is stil 0
				if (result.Equals(0)) WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Could not retrieve Id for "+entity.TKey);

			}

			return result;

		}

		/// <returns>Id of a recently created DepartmentReference as int</returns>
		private int RetrieveDepartmentReferenceId() => ((DepartmentReference)ReadPostFromDb("DepartmentReferences")).Id;

		/// <returns>Id of <paramref name="entity"/> as int</returns><param name="entity" /><param name="updateEntity" />
		public int RetrieveDepartmentReferenceId(DepartmentReference entity, bool updateEntity=false)
		{
			if(entity.IsEmpty()) return 0;

			int result=0;

			//Fast Retrieve Id
			entity.Validate();
			result=RetrieveDepartmentReference(entity).Id;

			if (!updateEntity)
			{
				//When fast retrieve fails: Refresh list and retrieve id again
				if (result.Equals(0)) { RefreshDepartmentReferences(true); result=RetrieveDepartmentReference(entity).Id; }

				//If DepartmentReference does not exist - create department reference in database
				if (result.Equals(0)) { entity=CheckSeniorDepartmentReferences(entity); result=CreateDepartmentReference(entity); }

				//Log error if Id is stil 0
				if (result.Equals(0)) WriteStringLineToLogFile(CurrentMethod()+" line "+CurrentLineNumber()+": Could not retrieve Id for "+entity.TKey);

			}

			return result;

		}

		/// <returns>Id of a recently created DownloadPath as int</returns>
		private int RetrieveDownloadPathId() => ((DownloadPath)ReadPostFromDb("DownloadPaths")).Id;

		/// <returns>Id of <paramref name="entity"/> as int</returns><param name="entity" />
		public int RetrieveDownloadPathId(DownloadPath entity)
		{
			if(entity.IsEmpty()) return 0;

			int result=0;

			//Fast retrieve id
			result=RetrieveDownloadPath(entity).Id;

			//When fast retrieve fails: Refresh list and retrieve id again
			if (result.Equals(0)) { RefreshDownloadPaths(); result=RetrieveDownloadPath(entity).Id; }

			//Log error if Id is stil 0
			if (result.Equals(0)) WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Could not retrieve Id for "+entity.ToString());


			return result;

		}

		/// <returns>Id of a recently created Employment as int</returns>
		private int RetrieveEmploymentId() => ((Employment)ReadPostFromDb("Employments")).Id;

		/// <returns>Id of <paramref name="entity"/> as int</returns><param name="entity" /><param name="updateEntity" />
		public int RetrieveEmploymentId(Employment entity, bool updateEntity=false)
		{
			if(entity.IsEmpty()) return 0;

			int result=0;

			if (entity.Institution.IsEmpty()) { entity.Institution=Config.CurrentInstitution; entity.Institution.Validate(); }

			//Fast Retrieve Id
			entity.Validate();
			result=RetrieveEmployment(entity).Id;

			if (!updateEntity)
			{
				//When fast retrieve fails: Refresh list and retrieve id again
				if (result<1) { RefreshEmployments(); result=RetrieveEmployment(entity).Id; }

				//If entity does not exist - create entity reference in database
				if (result < 1) { result=CreateEmployment(entity); }

				//Log error if Id is stil 0
				if (result.Equals(0)) WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Could not retrieve Id for "+entity.TKey);

			}

			return result;

		}

		/// <returns>Id of a recently created EmploymentStatus as int</returns>
		private int RetrieveEmploymentStatusId() => ((EmploymentStatus)ReadPostFromDb("EmploymentStatuses")).Id;

		/// <returns>Id of <paramref name="entity"/> as int</returns><param name="entity" /><param name="updateEntity" />
		public int RetrieveEmploymentStatusId(EmploymentStatus entity, bool updateEntity=false)
		{
			int result=0;

			//Fast retrieve id
			result=RetrieveEmploymentStatus(entity).Id;

			if (!updateEntity)
			{ 
				//When fast retrieve fails: Refresh list and retrieve id again
				if (result.Equals(0)) { RefreshEmploymentStatuses(); result=RetrieveEmploymentStatus(entity).Id; }

				//Log error if Id is stil 0
				if (result.Equals(0)) WriteStringLineToLogFile("- Could not retrieve Id for: "+entity.ToString()+Environment.NewLine+"- "+CurrentMethod()+" line "+CurrentLineNumber() +Environment.NewLine);

			}

			return result;

		}

		/// <returns>Id of a recently created Institution as int</returns>
		private int RetrieveInstitutionId() => ((Institution)ReadPostFromDb("Institutions")).Id;

		/// <returns>Id of <paramref name="entity"/> as int</returns><param name="entity" /><param name="updateEntity" />
		public int RetrieveInstitutionId(Institution entity, bool updateEntity=false)
		{
			int result=0;

			//Fast retrieve id
			entity.Validate();
			result=RetrieveInstitution(entity).Id;

			if (!updateEntity||!Config.RunMode.ToLower().Equals("depdata"))
			{
				if (result.Equals(0)) { RefreshInstitutions(); result=RetrieveInstitution(entity).Id; } //When fast retrieve fails: Refresh list and retrieve id again
				if (result.Equals(0)) WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber() +": Could not retrieve Id for "+entity.TKey); //Log error if Id is stil 0
			}

			return result;

		}

		/// <returns>Id of a recently created Organization as int</returns>
		private int RetrieveOrganizationId() => ((Organization)ReadPostFromDb("Organizations")).Id;

		/// <returns>Id of <paramref name="entity"/> as int</returns><param name="entity" /><param name="updateEntity" />
		public int RetrieveOrganizationId(Organization entity, bool updateEntity=false)
		{
			int result=0;

			if (entity.Institution.IsEmpty()) { entity.Institution=Config.CurrentInstitution; entity.Institution.Validate(); }

			//Fast retrieve id
			entity.Validate();
			result=RetrieveOrganization(entity).Id;

			if (!updateEntity)
			{
				//When fast retrieve fails: Refresh list and retrieve id again
				if (result.Equals(0)) { RefreshOrganizations(); result=RetrieveOrganization(entity).Id; }

				//Log error if Id is stil 0
				if (result.Equals(0)) WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Could not retrieve Id for "+entity.TKey);

			}

			return result;

		}

		/// <returns>Id of a recently created OrganizationStructure as int</returns>
		private int RetrieveOrganizationStructureId() => ((OrganizationStructure)ReadPostFromDb("OrganizationStructures")).Id;

		/// <returns>Id of <paramref name="entity"/> as int</returns><param name="entity" /><param name="updateEntity" />
		public int RetrieveOrganizationStructureId(OrganizationStructure entity, bool updateEntity=false)
		{
			int result=0;

			if (entity.Institution.IsEmpty()) { entity.Institution=Config.CurrentInstitution; entity.Institution.Validate(); }

			//Fast retrieve id
			entity.Validate();
			result=RetrieveOrganizationStructure(entity).Id;

			if (!updateEntity)
			{
				//When fast retrieve fails: Refresh list and retrieve id again
				if (result.Equals(0)) { RefreshOrganizationStructures(); result=RetrieveOrganizationStructure(entity).Id; }

				//Log error if Id is stil 0
				if (result.Equals(0)) WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Could not retrieve Id for "+entity.TKey);

			}

			return result;

		}

		/// <returns>Id of a recently created Person as int</returns>
		private int RetrievePersonId() => ((Person)ReadPostFromDb("Persons")).Id;

		/// <returns>Id of <paramref name="entity"/> as int</returns><param name="entity" /><param name="updateEntity" />
		public int RetrievePersonId(Person entity, bool updateEntity=false)
		{
			int result=0;

			if (entity.Institution.IsEmpty()) { entity.Institution=Config.CurrentInstitution; entity.Institution.Validate(); }

			//Fast retrieve id
			entity.Validate();
			result=RetrievePerson(entity).Id;

			if (!updateEntity)
			{
				//When fast retrieve fails: Refresh list and retrieve id again
				if (result.Equals(0)) { RefreshPersons(); result=RetrievePerson(entity).Id; }

				//If entity does not exist - create entity reference in database
				if (result.Equals(0)) result=CreatePerson(entity);

				//Log error if Id is stil 0
				if (result.Equals(0)) WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Could not retrieve Id for "+entity.TKey);

			}

			return result;

		}

		/// <returns>Id of a recently created PostalAddress as int</returns>
		private int RetrievePostalAddressId() => ((PostalAddress)ReadPostFromDb("PostalAddresses")).Id;

		/// <returns>Id of <paramref name="entity"/> as int</returns><param name="entity" />
		public int RetrievePostalAddressId(PostalAddress entity)
		{
			int result=0;

			//Fast retrieve id
			entity.Validate();
			result=RetrievePostalAddress(entity).Id;

			//When fast retrieve fails: Refresh list and retrieve id again
			if (result.Equals(0)) { RefreshPostalAddresses(); result=RetrievePostalAddress(entity).Id; }

			//Log error if Id is stil 0
			if (result.Equals(0)) WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Could not retrieve Id for "+entity.ToLongString());

			return result;

		}

		/// <returns>Id of a recently created Profession as int</returns>
		private int RetrieveProfessionId() => ((Profession)ReadPostFromDb("Professions")).Id;

		/// <returns>Id of <paramref name="entity"/> as int</returns><param name="entity" /><param name="updateEntity" />
		public int RetrieveProfessionId(Profession entity, bool updateEntity=false)
		{
			int result=0;

			if (entity.Institution.IsEmpty()) { entity.Institution=Config.CurrentInstitution; entity.Institution.Validate(); }

			// Fast retrieve Id
			entity.Validate();
			result=RetrieveProfession(entity).Id;

			if (!updateEntity)
			{
				//When fast retrieve fails: Refresh list and retrieve id again
				if (result.Equals(0)) { RefreshProfessions(); result=RetrieveProfession(entity).Id; }

				//Log error if Id is stil 0
				if (result.Equals(0)) WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Could not retrieve Id for "+entity.TKey);
			}

			return result;

		}

		/// <returns>Id of a recently created SalaryAgreement as int</returns>
		private int RetrieveSalaryAgreementId() => ((SalaryAgreement)ReadPostFromDb("SalaryAgreements")).Id;

		/// <returns>Id of <paramref name="entity"/> as int</returns><param name="entity" /><param name="updateEntity" />
		public int RetrieveSalaryAgreementId(SalaryAgreement entity, bool updateEntity=false)
		{
			int result=0;

			//Fast retrieve id
			result=RetrieveSalaryAgreement(entity).Id;

			if (!updateEntity)
			{
				//When fast retrieve fails: Refresh list and retrieve id again
				if (result.Equals(0)) { RefreshSalaryAgreements(); result=RetrieveSalaryAgreement(entity).Id; }

				//Log error if Id is stil 0
				if (result.Equals(0)) WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Could not retrieve Id for "+entity.ToString());

			}

			return result;

		}

		/// <returns>Id of a recently created SalaryCodeGroup as int</returns>
		private int RetrieveSalaryCodeGroupId() => ((SalaryCodeGroup)ReadPostFromDb("SalaryCodeGroups")).Id;

		/// <returns>Id of <paramref name="entity"/> as int</returns><param name="entity" /><param name="updateEntity" />
		public int RetrieveSalaryCodeGroupId(SalaryCodeGroup entity, bool updateEntity=false)
		{
			int result=0;

			//Fast retrieve id
			result=RetrieveSalaryCodeGroup(entity).Id;

			if (!updateEntity)
			{
				//When fast retrieve fails: Refresh list and retrieve id again
				if (result.Equals(0)) { RefreshSalaryCodeGroups(); result=RetrieveSalaryCodeGroup(entity).Id; }

				//Log error if Id is stil 0
				if (result.Equals(0)) WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Could not retrieve Id for "+entity.ToString());

			}

			return result;

		}

		/// <returns>Id of a recently created SuccessfulRun as int</returns>
		private int RetrieveSuccessfulRunId() => ((SuccessfulRun)ReadPostFromDb("SuccessfulRuns")).Id;

		/// <returns>Id of <paramref name="entity"/> as int</returns><param name="entity" /><param name="updateEntity" />
		public int RetrieveSuccessfulRunId(SuccessfulRun entity, bool updateEntity=false)
		{
			int result=0;

			//Fast retrieve id
			result=RetrieveSuccessfulRun(entity).Id;

			if (!updateEntity)
			{
					//When fast retrieve fails: Refresh list and retrieve id again
					if (result.Equals(0)) { RefreshSuccessfulRuns(); result=RetrieveSuccessfulRun(entity).Id; }

					//Log error if Id is stil 0
					if (result.Equals(0)) WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Could not retrieve Id for "+entity.ToString());

			}

			return result;

		}

		/// <returns>Id of a recently created WorkingTime as int</returns>
		private int RetrieveWorkingTimeId() => ((WorkingTime)ReadPostFromDb("WorkingTimes")).Id;

		/// <returns>Id of <paramref name="entity"/> as int</returns><param name="entity" /><param name="updateEntity" />
		public int RetrieveWorkingTimeId(WorkingTime entity, bool updateEntity=false)
		{
			//Fast retrieve id
			int result=0;

			//Fast retrieve id
			result=RetrieveWorkingTime(entity).Id;

			if (!updateEntity)
			{
				//When fast retrieve fails: Refresh list and retrieve id again
				if (result.Equals(0))
					{
						RefreshWorkingTimes();
						result=RetrieveWorkingTime(entity).Id;
					}

				//Log error if Id is stil 0
				if (result.Equals(0)) WriteStringLineToLogFile("- "+CurrentMethod()+" line "+CurrentLineNumber()+": Could not retrieve Id for "+entity.ToString());

			}

			return result;

		}

		#endregion

		#region Retrieve Orphan Entities

		/// <summary>Checks wether the there is orphan ContactInformations in database</summary>
		private void RetrieveOrphanContactInformations()
		{
			WriteStringLineToLogFile(DiscAccess.RetrieveDashedStringLog(" Retrieving orphan contact informations initiated "));

			FillTempContactInformationDict();
			ClearBulkInstitutions();
			ClearBulkDepartments();
			ClearBulkPersons();

			foreach (Department dept in Config.Database.Departments)
			{
				if (dept.Id >= 1)
				{
					if (dept.ContactInformation == null || !dept.ContactInformation.Id.Equals(dept.Id+50000))
					{
						if (Config.Dict.TempContactInformationDict.ContainsKey(dept.Id+50000))
						{
							dept.ContactInformation=new(Config.Dict.TempContactInformationDict[dept.Id+50000]);
							Config.BulkExist.DepartmentList.Add(dept);
						}
					}
				}
			}

			foreach (Person Person in Config.Database.Persons)
			{
				if (Person.Id >= 1)
				{
					if (Person.ContactInformation == null || !Person.ContactInformation.Id.Equals(Person.Id))
					{
						if (Config.Dict.TempContactInformationDict.ContainsKey(Person.Id))
						{
							Person.ContactInformation=new(Config.Dict.TempContactInformationDict[Person.Id]);
							Config.BulkExist.PersonList.Add(Person);
						}
					}
				}
			}

			if (Config.BulkExist.DepartmentList.Count >= 1)
			{
				WriteStringLineToLogFile("- "+Config.BulkExist.DepartmentList.Count+" orphan contact informations for Departments retrieved");

				if (BulkUpdateList(Config.BulkExist.DepartmentList))
				{
					WriteStringLineToLogFile("- "+Config.BulkExist.DepartmentList.Count+" Departments updated in database");
					RefreshPersons();
				}
				else
				{
					WriteStringLineToLogFile("- No Departments were updated in database");
				}
			}
			else
			{
				WriteStringLineToLogFile("- No orphan contact informations for Departments retrieved");
			}

			if (Config.BulkExist.PersonList.Count >= 1)
			{
				WriteStringLineToLogFile("- "+Config.BulkExist.PersonList.Count+" orphan contact informations for Persons retrieved");

				if (BulkUpdateList(Config.BulkExist.PersonList))
				{
					WriteStringLineToLogFile("- "+Config.BulkExist.PersonList.Count+" Persons updated in database");
					RefreshPersons();
				}
				else
				{
					WriteStringLineToLogFile("- No Persons were updated in database");
				}
			}
			else
			{
				WriteStringLineToLogFile("- No orphan contact informations for Persons retrieved");
			}

			WriteStringLineToLogFile("- Finished retrieving orphan contact informations"+Environment.NewLine);

		}

		/// <summary>Checks wether the there is orphan EmploymentStatuses in database</summary>
		private void RetrieveOrphanEmploymentStatuses()
		{
			WriteStringLineToLogFile(DiscAccess.RetrieveDashedStringLog(" Retrieving orphan employment statuses initiated "));

			FillTempEmploymentStatusDict();
			ClearBulkEmployments();

			foreach (Employment empl in Config.Database.Employments)
			{
				if (empl.Id >= 1)
				{
					if (empl.EmploymentStatus == null || !empl.EmploymentStatus.Id.Equals(empl.Id))
					{
						if (Config.Dict.TempEmploymentStatusDict.ContainsKey(empl.Id))
						{
							empl.EmploymentStatus=new(Config.Dict.TempEmploymentStatusDict[empl.Id]);
							Config.BulkExist.EmploymentList.Add(empl);
						}
					}
				}
			}

			if (Config.BulkExist.EmploymentList.Count >= 1)
			{
				WriteStringLineToLogFile("- "+Config.BulkExist.EmploymentList.Count+" orphan employment statuses for Employments retrieved");

				if (BulkUpdateList(Config.BulkExist.EmploymentList))
				{
					WriteStringLineToLogFile("- "+Config.BulkExist.EmploymentList.Count+" Employments updated in database");
					RefreshPersons();
				}
				else
				{
					WriteStringLineToLogFile("- No Employments were updated in database");
				}
			}
			else
			{
				WriteStringLineToLogFile("- No orphan employment statuses for Employments retrieved");
			}

			WriteStringLineToLogFile("- Finished retrieving orphan employment statuses"+Environment.NewLine);

		}

		/// <summary>Checks wether the there is orphan entities in database</summary>
		private void RetrieveOrphanEntities()
		{
			Console.WriteLine("- Checking the database for orphan data");
			WriteStringLineToLogFile("Checking the database for orphan data");

			this.RetrieveOrphanContactInformations();
			this.RetrieveOrphanPostalAddresses();
			this.RetrieveOrphanEmploymentStatuses();
			this.RetrieveOrphanSalaryAgreements();
			this.RetrieveOrphanSalaryCodeGroups();
			this.RetrieveOrphanWorkingTimes();
		}

		/// <summary>Checks wether the there is orphan PostalAddresses in database</summary>
		private void RetrieveOrphanPostalAddresses()
		{
			WriteStringLineToLogFile(DiscAccess.RetrieveDashedStringLog(" Retrieving orphan postal addresses initiated "));

			FillTempPostalAddressDict();
			ClearBulkInstitutions();
			ClearBulkDepartments();
			ClearBulkPersons();

			foreach (Department dept in Config.Database.Departments)
			{
				if (dept.Id >= 1)
				{
					if (dept.PostalAddress == null || !dept.PostalAddress.Id.Equals(dept.Id+50000))
					{
						if (Config.Dict.TempPostalAddressDict.ContainsKey(dept.Id+50000))
						{
							dept.PostalAddress=new(Config.Dict.TempPostalAddressDict[dept.Id+50000]);
							Config.BulkExist.DepartmentList.Add(dept);
						}
					}
				}
			}

			foreach (Person Person in Config.Database.Persons)
			{
				if (Person.Id >= 1)
				{
					if (Person.PostalAddress == null || !Person.PostalAddress.Id.Equals(Person.Id))
					{
						if (Config.Dict.TempPostalAddressDict.ContainsKey(Person.Id))
						{
							Person.PostalAddress=new(Config.Dict.TempPostalAddressDict[Person.Id]);
							Config.BulkExist.PersonList.Add(Person);
						}
					}
				}
			}

			if (Config.BulkExist.InstitutionList.Count >= 1)
			{
				WriteStringLineToLogFile("- "+Config.BulkExist.InstitutionList.Count+" orphan postal addresses for Institutions retrieved");

				if (BulkUpdateList(Config.BulkExist.InstitutionList))
				{
					WriteStringLineToLogFile("- "+Config.BulkExist.InstitutionList.Count+" Institutions updated in database");
					RefreshPersons();
				}
				else
				{
					WriteStringLineToLogFile("- No Institutions were updated in database");
				}
			}
			else
			{
				WriteStringLineToLogFile("- No orphan postal addresses for Institutions retrieved");
			}

			if (Config.BulkExist.DepartmentList.Count >= 1)
			{
				WriteStringLineToLogFile("- "+Config.BulkExist.DepartmentList.Count+" orphan postal addresses for Departments retrieved");

				if (BulkUpdateList(Config.BulkExist.DepartmentList))
				{
					WriteStringLineToLogFile("- "+Config.BulkExist.DepartmentList.Count+" Departments updated in database");
					RefreshPersons();
				}
				else
				{
					WriteStringLineToLogFile("- No Departments were updated in database");
				}
			}
			else
			{
				WriteStringLineToLogFile("- No orphan postal addresses for Departments retrieved");
			}

			if (Config.BulkExist.PersonList.Count >= 1)
			{
				WriteStringLineToLogFile("- "+Config.BulkExist.PersonList.Count+" orphan postal addresses for Persons retrieved");

				if (BulkUpdateList(Config.BulkExist.PersonList))
				{
					WriteStringLineToLogFile("- "+Config.BulkExist.PersonList.Count+" Persons updated in database");
					RefreshPersons();
				}
				else
				{
					WriteStringLineToLogFile("- No Persons were updated in database");
				}
			}
			else
			{
				WriteStringLineToLogFile("- No orphan postal addresses for Persons retrieved");
			}

			WriteStringLineToLogFile("- Finished retrieving orphan postal addresses"+Environment.NewLine);

		}

		/// <summary>Checks wether the there is orphan SalaryAgreements in database</summary>
		private void RetrieveOrphanSalaryAgreements()
		{
			WriteStringLineToLogFile(DiscAccess.RetrieveDashedStringLog(" Retrieving orphan salary agreements initiated "));

			FillTempSalaryAgreementDict();
			ClearBulkEmployments();

			foreach (Employment empl in Config.Database.Employments)
			{
				if (empl.Id >= 1)
				{
					if (empl.SalaryAgreement == null || !empl.SalaryAgreement.Id.Equals(empl.Id))
					{
						if (Config.Dict.TempSalaryAgreementDict.ContainsKey(empl.Id))
						{
							empl.SalaryAgreement=new(Config.Dict.TempSalaryAgreementDict[empl.Id]);
							Config.BulkExist.EmploymentList.Add(empl);
						}
					}
				}
			}

			if (Config.BulkExist.EmploymentList.Count >= 1)
			{
				WriteStringLineToLogFile("- "+Config.BulkExist.EmploymentList.Count+" orphan salary agreements for Employments retrieved");

				if (BulkUpdateList(Config.BulkExist.EmploymentList))
				{
					WriteStringLineToLogFile("- "+Config.BulkExist.EmploymentList.Count+" Employments updated in database");
					RefreshPersons();
				}
				else
				{
					WriteStringLineToLogFile("- No Employments were updated in database");
				}
			}
			else
			{
				WriteStringLineToLogFile("- No orphan salary agreements for Employments retrieved");
			}

			WriteStringLineToLogFile("- Finished retrieving orphan salary agreements"+Environment.NewLine);

		}

		/// <summary>Checks wether the there is orphan SalaryCodeGroups in database</summary>
		private void RetrieveOrphanSalaryCodeGroups()
		{
			WriteStringLineToLogFile(DiscAccess.RetrieveDashedStringLog(" Retrieving orphan salary code groups initiated "));

			FillTempSalaryCodeGroupDict();
			ClearBulkEmployments();

			foreach (Employment empl in Config.Database.Employments)
			{
				if (empl.Id >= 1)
				{
					if (empl.SalaryCodeGroup == null || !empl.SalaryCodeGroup.Id.Equals(empl.Id))
					{
						if (Config.Dict.TempSalaryCodeGroupDict.ContainsKey(empl.Id))
						{
							empl.SalaryCodeGroup=new(Config.Dict.TempSalaryCodeGroupDict[empl.Id]);
							Config.BulkExist.EmploymentList.Add(empl);
						}
					}
				}
			}

			if (Config.BulkExist.EmploymentList.Count >= 1)
			{
				WriteStringLineToLogFile("- "+Config.BulkExist.EmploymentList.Count+" orphan salary code groups for Employments retrieved");

				if (BulkUpdateList(Config.BulkExist.EmploymentList))
				{
					WriteStringLineToLogFile("- "+Config.BulkExist.EmploymentList.Count+" Employments updated in database");
					RefreshPersons();
				}
				else
				{
					WriteStringLineToLogFile("- No Employments were updated in database");
				}
			}
			else
			{
				WriteStringLineToLogFile("- No orphan salary code groups for Employments retrieved");
			}

			WriteStringLineToLogFile("- Finished retrieving orphan salary code groups"+Environment.NewLine);

		}

		/// <summary>Checks wether the there is orphan WorkingTimes in database</summary>
		private void RetrieveOrphanWorkingTimes()
		{
			WriteStringLineToLogFile(DiscAccess.RetrieveDashedStringLog(" Retrieving orphan working times initiated "));

			FillTempWorkingTimeDict();
			ClearBulkEmployments();

			foreach (Employment empl in Config.Database.Employments)
			{
				if (empl.Id >= 1)
				{
					if (empl.WorkingTime == null || !empl.WorkingTime.Id.Equals(empl.Id))
					{
						if (Config.Dict.TempWorkingTimeDict.ContainsKey(empl.Id))
						{
							empl.WorkingTime=new(Config.Dict.TempWorkingTimeDict[empl.Id]);
							Config.BulkExist.EmploymentList.Add(empl);
						}
					}
				}
			}

			if (Config.BulkExist.EmploymentList.Count >= 1)
			{
				WriteStringLineToLogFile("- "+Config.BulkExist.EmploymentList.Count+" orphan working times for Employments retrieved");

				if (BulkUpdateList(Config.BulkExist.EmploymentList))
				{
					WriteStringLineToLogFile("- "+Config.BulkExist.EmploymentList.Count+" Employments updated in database");
					RefreshPersons();
				}
				else
				{
					WriteStringLineToLogFile("- No Employments were updated in database");
				}
			}
			else
			{
				WriteStringLineToLogFile("- No orphan working times for Employments retrieved");
			}

			WriteStringLineToLogFile("- Finished retrieving orphan working times"+Environment.NewLine);

		}

		#endregion

		/// <summary>Retrieves content of Config.Database.XmEmployments list</summary>
		public void RetrieveXmEmployments() { string[] args={ "All" }; Config.Database.XmEmployments=ReadListFromDbFromStoredProcedure<XmEmployment>("SelectXmEmployments", args); }

		#endregion

		#region Set
		/// <summary>Sets Config.CurrentInstitution</summary><returns>Result as bool</returns>
		public bool SetCurrentInstitution()
		{
			if (string.IsNullOrWhiteSpace(Config.CurrentInstitutionIdentifier)) { WriteStringLineToLogFile("- Cannot set CurrentInstitution in Config when "+nameof(Config.CurrentInstitutionIdentifier)+" is empty"); return false; }

			try
			{
				RefreshInstitutions();

				if (Config.CheckInstitutionIdentifier(Config.CurrentInstitutionIdentifier))
				{
					Config.CurrentInstitution=RetrieveInstitution(Config.CurrentInstitutionIdentifier);

					if (Config.CurrentInstitution.Id>=1) return true;
					else
					{
						Config.CurrentInstitution.Id=RetrieveInstitutionId(Config.CurrentInstitution);
						if (Config.CurrentInstitution.Id>=1) return true;
						else { Config.CurrentInstitution.InstitutionIdentifier=Config.CurrentInstitutionIdentifier; Config.CurrentInstitution.Validate(); return true; }
					}

				}
				else throw new InvalidRefException(nameof(Config.CurrentInstitutionIdentifier),Config.CurrentInstitutionIdentifier,Config.CurrentInstitutionIdentifier+Error.UnkParam);

			}
			catch (ExpressionException eex) { WriteStringLineToLogFile(Environment.NewLine+eex.ToErrorString()+Environment.NewLine); return false; }
			catch (Exception ex) { WriteStringLineToLogFile(Environment.NewLine+ExpressionException.ToErrorString(ex)+Environment.NewLine); return false; }

		}

		/// <summary>Sets Config.CurrentOrganization</summary><returns>Result as bool</returns>
		public bool SetCurrentOrganization()
		{
			if (Config.CurrentInstitution.Id>=1) { RefreshOrganizations(); foreach (Organization entity in Config.List.OrganizationList) if (entity.Institution.Equals(Config.CurrentInstitution)) { Config.CurrentOrganization=entity; return true; } }
			else if (SetCurrentInstitution()) { RefreshOrganizations(); foreach (Organization entity in Config.List.OrganizationList) if (entity.Institution.Equals(Config.CurrentInstitution)) { Config.CurrentOrganization=new(entity); return true; } }
			return false;
		}

		/// <summary>Sets Config.CurrentOrganizationStructure</summary><returns>Result as bool</returns>
		public bool SetCurrentOrganizationStructure()
		{
			if (Config.CurrentInstitution.Id>=1) { RefreshOrganizationStructures(); foreach (OrganizationStructure entity in Config.List.OrganizationStructureList) if (entity.Institution.Equals(Config.CurrentInstitution)) { Config.CurrentOrganizationStructure=entity; return true; } }
			else if (SetCurrentInstitution()) { RefreshOrganizationStructures(); foreach (OrganizationStructure entity in Config.List.OrganizationStructureList) if (entity.Institution.Equals(Config.CurrentInstitution)) { Config.CurrentOrganizationStructure=entity; return true; } }
			return false;
		}

		#endregion

		/// <returns>Trimmed <paramref name="connectiontring"/> as string</returns><param name="connectiontring" />
		private string TrimConnectionString(string connectiontring)
		{
			if(string.IsNullOrWhiteSpace(connectiontring)) throw new ArgumentInvalidException(nameof(connectiontring),connectiontring,nameof(connectiontring)+Error.CantBeEmpty);

			string result=connectiontring.Trim();

			while (result.Remove(1).Equals("\n")||result.Remove(1).Equals("\t")||result.Remove(0, result.Length - 1).Equals("\n") || result.Remove(0, result.Length - 1).Equals("\t"))
			{
				result=connectiontring.Trim(Convert.ToChar("\n"));
				result=connectiontring.Trim(Convert.ToChar("\t"));
			}

			return result;

		}

		#region Write
		/// <returns>Result as bool</returns><param name="path" /><param name="content" /><param name="encoding" />
		public bool WriteStringToFile(string path,string content,Encoding? encoding=null) => DiscAccessExt.WriteStringToFile(path,content,encoding);

		/// <returns>Result as bool</returns><param name="path" /><param name="line" /><param name="encoding" />
		public bool WriteStringLineToFile(string path,string line,Encoding? encoding=null) => DiscAccessExt.WriteStringLineToFile(path,line,encoding);

		/// <returns>Result as bool</returns><param name="line" />
		public bool WriteStringLineToLogFile(string line)
		{
			if (!string.IsNullOrWhiteSpace(this.Config.LogFilePath))
			{
				try { if(DiscAccess.FileExist(this.Config.LogFilePath)) return WriteStringLineToFile(this.Config.LogFilePath,line); else return WriteStringToFile(this.Config.LogFilePath,line+Environment.NewLine); }
				catch (ExpressionException eex) { Console.WriteLine(eex.ToErrorString()); return false; }
				catch (Exception ex) { Console.WriteLine(ExpressionException.ToErrorString(ex)); return false; }
			}
			else { Console.Write(line); return false; }
		}
		

		#endregion

		#endregion

	}
}
